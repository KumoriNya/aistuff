Start checking lemma


Iterating


Node: (0, 0) satisfies lemma. Building bridges.
Trying to build bridge from (0, 0) = 4 to (0, 3) = 3
Updating neighbours on the side of ends: [(0, 0), (0, 3)]
Bridge(-1) from (0, 0) = 4 to (0, 3) = 3 built
Affected nodes:
	{'xy': (0, 0), 'value': 4, 'capacity': 3, 'neighbours': [{'node': (0, 3), 'position': 1}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 0}
	{'xy': (0, 3), 'value': 3, 'capacity': 2, 'neighbours': [{'node': (0, 0), 'position': 0}], 'is_completed': False, 'position': 1}
Bridge:
	{'ends': [(0, 0), (0, 3)], 'val': -1, 'is_hor': True, 'lemma_val': -1}
============

4--3.
.4..2
..1..
.3...
3.5.3


Trying to build bridge from (0, 0) = 4 to (4, 0) = 3
Updating neighbours on the side of ends: [(0, 0), (4, 0)]
Bridge(-1) from (0, 0) = 4 to (4, 0) = 3 built
Affected nodes:
	{'xy': (0, 0), 'value': 4, 'capacity': 2, 'neighbours': [{'node': (0, 3), 'position': 1}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 0}
	{'xy': (4, 0), 'value': 3, 'capacity': 2, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (0, 0), 'position': 0}], 'is_completed': False, 'position': 6}
Bridge:
	{'ends': [(0, 0), (4, 0)], 'val': -1, 'is_hor': False, 'lemma_val': -1}
============

4--3.
|4..2
|.1..
|3...
3.5.3


Node: (0, 3) satisfies lemma. Building bridges.
Trying to build bridge from (0, 3) = 3 to (0, 0) = 4
Updating neighbours on the side of ends: [(0, 0), (0, 3)]
======
Adding neighbours back for
	{'xy': (0, 3), 'value': 3, 'capacity': 3, 'neighbours': [{'node': (0, 0), 'position': 0}], 'is_completed': False, 'position': 1}
and
	{'xy': (0, 0), 'value': 4, 'capacity': 3, 'neighbours': [{'node': (0, 3), 'position': 1}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 0}
======
Bridge(0) from (0, 3) = 3 to (0, 0) = 4 built
Affected nodes:
	{'xy': (0, 3), 'value': 3, 'capacity': 3, 'neighbours': [{'node': (0, 0), 'position': 0}], 'is_completed': False, 'position': 1}
	{'xy': (0, 0), 'value': 4, 'capacity': 3, 'neighbours': [{'node': (0, 3), 'position': 1}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 0}
Bridge:
	{'ends': [(0, 0), (0, 3)], 'val': 0, 'is_hor': True, 'lemma_val': -1}
============

4..3.
|4..2
|.1..
|3...
3.5.3


Trying to build bridge from (0, 3) = 3 to (0, 0) = 4
Updating neighbours on the side of ends: [(0, 0), (0, 3)]
Removed {'node': (0, 3), 'position': 1} from {'xy': (0, 0), 'value': 4, 'capacity': 0, 'neighbours': [{'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 0}
Removed {'node': (0, 0), 'position': 0} from {'xy': (0, 3), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': False, 'position': 1}
Bridge(-3) from (0, 3) = 3 to (0, 0) = 4 built
Affected nodes:
	{'xy': (0, 3), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 1}
	{'xy': (0, 0), 'value': 4, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 0}
Bridge:
	{'ends': [(0, 0), (0, 3)], 'val': -3, 'is_hor': True, 'lemma_val': -1}
============

4EE3.
|4..2
|.1..
|3...
3.5.3


Node: (1, 1) satisfies lemma. Building bridges.
Trying to build bridge from (1, 1) = 4 to (1, 4) = 2
Updating neighbours on the side of ends: [(1, 1), (1, 4)]
Bridge(-1) from (1, 1) = 4 to (1, 4) = 2 built
Affected nodes:
	{'xy': (1, 1), 'value': 4, 'capacity': 3, 'neighbours': [{'node': (1, 4), 'position': 3}, {'node': (3, 1), 'position': 5}], 'is_completed': False, 'position': 2}
	{'xy': (1, 4), 'value': 2, 'capacity': 1, 'neighbours': [{'node': (1, 1), 'position': 2}, {'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 3}
Bridge:
	{'ends': [(1, 1), (1, 4)], 'val': -1, 'is_hor': True, 'lemma_val': -1}
============

4EE3.
|4--2
|.1..
|3...
3.5.3


Trying to build bridge from (1, 1) = 4 to (3, 1) = 3
Updating neighbours on the side of ends: [(1, 1), (3, 1)]
Bridge(-1) from (1, 1) = 4 to (3, 1) = 3 built
Affected nodes:
	{'xy': (1, 1), 'value': 4, 'capacity': 2, 'neighbours': [{'node': (1, 4), 'position': 3}, {'node': (3, 1), 'position': 5}], 'is_completed': False, 'position': 2}
	{'xy': (3, 1), 'value': 3, 'capacity': 2, 'neighbours': [{'node': (1, 1), 'position': 2}], 'is_completed': False, 'position': 5}
Bridge:
	{'ends': [(1, 1), (3, 1)], 'val': -1, 'is_hor': False, 'lemma_val': -1}
============

4EE3.
|4--2
||1..
|3...
3.5.3


Node: (2, 2) satisfies lemma. Building bridges.
Trying to build bridge from (2, 2) = 1 to (4, 2) = 5
Updating neighbours on the side of ends: [(2, 2), (4, 2)]
======
Adding neighbours back for
	{'xy': (2, 2), 'value': 1, 'capacity': 1, 'neighbours': [{'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 4}
and
	{'xy': (4, 2), 'value': 5, 'capacity': 5, 'neighbours': [{'node': (4, 0), 'position': 6}, {'node': (4, 4), 'position': 8}, {'node': (2, 2), 'position': 4}], 'is_completed': False, 'position': 7}
======
Bridge(0) from (2, 2) = 1 to (4, 2) = 5 built
Affected nodes:
	{'xy': (2, 2), 'value': 1, 'capacity': 1, 'neighbours': [{'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 4}
	{'xy': (4, 2), 'value': 5, 'capacity': 5, 'neighbours': [{'node': (4, 0), 'position': 6}, {'node': (4, 4), 'position': 8}, {'node': (2, 2), 'position': 4}], 'is_completed': False, 'position': 7}
Bridge:
	{'ends': [(2, 2), (4, 2)], 'val': 0, 'is_hor': False, 'lemma_val': 0}
============

4EE3.
|4--2
||1..
|3...
3.5.3


Trying to build bridge from (2, 2) = 1 to (4, 2) = 5
Updating neighbours on the side of ends: [(2, 2), (4, 2)]
Bridge(-1) from (2, 2) = 1 to (4, 2) = 5 built
Affected nodes:
	{'xy': (2, 2), 'value': 1, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 4}
	{'xy': (4, 2), 'value': 5, 'capacity': 4, 'neighbours': [{'node': (4, 0), 'position': 6}, {'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 7}
Bridge:
	{'ends': [(2, 2), (4, 2)], 'val': -1, 'is_hor': False, 'lemma_val': 0}
============

4EE3.
|4--2
||1..
|3|..
3.5.3


Node: (3, 1) satisfies lemma. Building bridges.
Trying to build bridge from (3, 1) = 3 to (1, 1) = 4
Updating neighbours on the side of ends: [(1, 1), (3, 1)]
======
Adding neighbours back for
	{'xy': (3, 1), 'value': 3, 'capacity': 3, 'neighbours': [{'node': (1, 1), 'position': 2}], 'is_completed': False, 'position': 5}
and
	{'xy': (1, 1), 'value': 4, 'capacity': 3, 'neighbours': [{'node': (1, 4), 'position': 3}, {'node': (3, 1), 'position': 5}], 'is_completed': False, 'position': 2}
======
Bridge(0) from (3, 1) = 3 to (1, 1) = 4 built
Affected nodes:
	{'xy': (3, 1), 'value': 3, 'capacity': 3, 'neighbours': [{'node': (1, 1), 'position': 2}], 'is_completed': False, 'position': 5}
	{'xy': (1, 1), 'value': 4, 'capacity': 3, 'neighbours': [{'node': (1, 4), 'position': 3}, {'node': (3, 1), 'position': 5}], 'is_completed': False, 'position': 2}
Bridge:
	{'ends': [(1, 1), (3, 1)], 'val': 0, 'is_hor': False, 'lemma_val': -1}
============

4EE3.
|4--2
|.1..
|3|..
3.5.3


Trying to build bridge from (3, 1) = 3 to (1, 1) = 4
Updating neighbours on the side of ends: [(1, 1), (3, 1)]
Removed {'node': (3, 1), 'position': 5} from {'xy': (1, 1), 'value': 4, 'capacity': 0, 'neighbours': [{'node': (1, 4), 'position': 3}], 'is_completed': False, 'position': 2}
Removed {'node': (1, 1), 'position': 2} from {'xy': (3, 1), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': False, 'position': 5}
Bridge(-3) from (3, 1) = 3 to (1, 1) = 4 built
Affected nodes:
	{'xy': (3, 1), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 5}
	{'xy': (1, 1), 'value': 4, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 2}
Bridge:
	{'ends': [(1, 1), (3, 1)], 'val': -3, 'is_hor': False, 'lemma_val': -1}
============

4EE3.
|4--2
|#1..
|3|..
3.5.3


Node: (4, 0) satisfies lemma. Building bridges.
Trying to build bridge from (4, 0) = 3 to (4, 2) = 5
Updating neighbours on the side of ends: [(4, 0), (4, 2)]
======
Adding neighbours back for
	{'xy': (4, 0), 'value': 3, 'capacity': 2, 'neighbours': [{'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 6}
and
	{'xy': (4, 2), 'value': 5, 'capacity': 4, 'neighbours': [{'node': (4, 0), 'position': 6}, {'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 7}
======
Bridge(0) from (4, 0) = 3 to (4, 2) = 5 built
Affected nodes:
	{'xy': (4, 0), 'value': 3, 'capacity': 2, 'neighbours': [{'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 6}
	{'xy': (4, 2), 'value': 5, 'capacity': 4, 'neighbours': [{'node': (4, 0), 'position': 6}, {'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 7}
Bridge:
	{'ends': [(4, 0), (4, 2)], 'val': 0, 'is_hor': True, 'lemma_val': 0}
============

4EE3.
|4--2
|#1..
|3|..
3.5.3


Trying to build bridge from (4, 0) = 3 to (4, 2) = 5
Updating neighbours on the side of ends: [(4, 0), (4, 2)]
Bridge(-2) from (4, 0) = 3 to (4, 2) = 5 built
Affected nodes:
	{'xy': (4, 0), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 6}
	{'xy': (4, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 7}
Bridge:
	{'ends': [(4, 0), (4, 2)], 'val': -2, 'is_hor': True, 'lemma_val': 0}
============

4EE3.
|4--2
|#1..
|3|..
3=5.3


Node: (4, 2) satisfies lemma. Building bridges.
Trying to build bridge from (4, 2) = 5 to (4, 4) = 3
Updating neighbours on the side of ends: [(4, 2), (4, 4)]
======
Adding neighbours back for
	{'xy': (4, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 7}
and
	{'xy': (4, 4), 'value': 3, 'capacity': 3, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (1, 4), 'position': 3}], 'is_completed': False, 'position': 8}
======
Bridge(0) from (4, 2) = 5 to (4, 4) = 3 built
Affected nodes:
	{'xy': (4, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 7}
	{'xy': (4, 4), 'value': 3, 'capacity': 3, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (1, 4), 'position': 3}], 'is_completed': False, 'position': 8}
Bridge:
	{'ends': [(4, 2), (4, 4)], 'val': 0, 'is_hor': True, 'lemma_val': 0}
============

4EE3.
|4--2
|#1..
|3|..
3=5.3


Trying to build bridge from (4, 2) = 5 to (4, 4) = 3
Updating neighbours on the side of ends: [(4, 2), (4, 4)]
Bridge(-2) from (4, 2) = 5 to (4, 4) = 3 built
Affected nodes:
	{'xy': (4, 2), 'value': 5, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 7}
	{'xy': (4, 4), 'value': 3, 'capacity': 1, 'neighbours': [{'node': (1, 4), 'position': 3}], 'is_completed': False, 'position': 8}
Bridge:
	{'ends': [(4, 2), (4, 4)], 'val': -2, 'is_hor': True, 'lemma_val': 0}
============

4EE3.
|4--2
|#1..
|3|..
3=5=3


Node: (4, 4) satisfies lemma. Building bridges.
Trying to build bridge from (4, 4) = 3 to (1, 4) = 2
Updating neighbours on the side of ends: [(1, 4), (4, 4)]
======
Adding neighbours back for
	{'xy': (4, 4), 'value': 3, 'capacity': 1, 'neighbours': [{'node': (1, 4), 'position': 3}], 'is_completed': False, 'position': 8}
and
	{'xy': (1, 4), 'value': 2, 'capacity': 1, 'neighbours': [{'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 3}
======
Bridge(0) from (4, 4) = 3 to (1, 4) = 2 built
Affected nodes:
	{'xy': (4, 4), 'value': 3, 'capacity': 1, 'neighbours': [{'node': (1, 4), 'position': 3}], 'is_completed': False, 'position': 8}
	{'xy': (1, 4), 'value': 2, 'capacity': 1, 'neighbours': [{'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 3}
Bridge:
	{'ends': [(1, 4), (4, 4)], 'val': 0, 'is_hor': False, 'lemma_val': 0}
============

4EE3.
|4--2
|#1..
|3|..
3=5=3


Trying to build bridge from (4, 4) = 3 to (1, 4) = 2
Updating neighbours on the side of ends: [(1, 4), (4, 4)]
Bridge(-1) from (4, 4) = 3 to (1, 4) = 2 built
Affected nodes:
	{'xy': (4, 4), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 8}
	{'xy': (1, 4), 'value': 2, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 3}
Bridge:
	{'ends': [(1, 4), (4, 4)], 'val': -1, 'is_hor': False, 'lemma_val': 0}
============

4EE3.
|4--2
|#1.|
|3|.|
3=5=3




Iterating


finished checking lemma
4EE3.
|4--2
|#1.|
|3|.|
3=5=3

Enter #0 recursive at node index [0] at its [-2] th neighbour
4EE3.
|4--2
|#1.|
|3|.|
3=5=3
{'xy': (0, 0), 'value': 4, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 0}
{'xy': (0, 3), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 1}
{'xy': (1, 1), 'value': 4, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 2}
{'xy': (1, 4), 'value': 2, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 3}
{'xy': (2, 2), 'value': 1, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 4}
{'xy': (3, 1), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 5}
{'xy': (4, 0), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 6}
{'xy': (4, 2), 'value': 5, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 7}
{'xy': (4, 4), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 8}
{'ends': [(0, 0), (0, 3)], 'val': -3, 'is_hor': True, 'lemma_val': -1}
{'ends': [(0, 0), (4, 0)], 'val': -1, 'is_hor': False, 'lemma_val': -1}
{'ends': [(1, 1), (1, 4)], 'val': -1, 'is_hor': True, 'lemma_val': -1}
{'ends': [(1, 1), (3, 1)], 'val': -3, 'is_hor': False, 'lemma_val': -1}
{'ends': [(2, 2), (4, 2)], 'val': -1, 'is_hor': False, 'lemma_val': 0}
{'ends': [(4, 0), (4, 2)], 'val': -2, 'is_hor': True, 'lemma_val': 0}
{'ends': [(4, 2), (4, 4)], 'val': -2, 'is_hor': True, 'lemma_val': 0}
{'ends': [(1, 4), (4, 4)], 'val': -1, 'is_hor': False, 'lemma_val': 0}
