[2, 0, 6, 0, 0, 5, 0]
[0, 0, 0, 0, 0, 0, 0]
[5, 0, 7, 0, 0, 6, 0]
[0, 0, 0, 0, 0, 0, 0]
[7, 0, 7, 0, 0, 8, 0]
[0, 0, 0, 0, 0, 0, 0]
[6, 0, 7, 0, 0, 6, 0]
Finding for (0, 0) = 2
All neighbours for (0, 0) = 2: [(0, 2), (2, 0)]
Finding for (0, 2) = 6
All neighbours for (0, 2) = 6: [(0, 0), (0, 5), (2, 2)]
Finding for (0, 5) = 5
All neighbours for (0, 5) = 5: [(0, 2), (2, 5)]
Finding for (2, 0) = 5
All neighbours for (2, 0) = 5: [(2, 2), (0, 0), (4, 0)]
Finding for (2, 2) = 7
All neighbours for (2, 2) = 7: [(2, 0), (2, 5), (0, 2), (4, 2)]
Finding for (2, 5) = 6
All neighbours for (2, 5) = 6: [(2, 2), (0, 5), (4, 5)]
Finding for (4, 0) = 7
All neighbours for (4, 0) = 7: [(4, 2), (2, 0), (6, 0)]
Finding for (4, 2) = 7
All neighbours for (4, 2) = 7: [(4, 0), (4, 5), (2, 2), (6, 2)]
Finding for (4, 5) = 8
All neighbours for (4, 5) = 8: [(4, 2), (2, 5), (6, 5)]
Finding for (6, 0) = 6
All neighbours for (6, 0) = 6: [(6, 2), (4, 0)]
Finding for (6, 2) = 7
All neighbours for (6, 2) = 7: [(6, 0), (6, 5), (4, 2)]
Finding for (6, 5) = 6
All neighbours for (6, 5) = 6: [(6, 2), (4, 5)]
Initialisation complete:
{'xy': (0, 0), 'capacity': 2, 'neighbours': [{'node': (0, 2), 'position': 1}, {'node': (2, 0), 'position': 3}], 'is_completed': False, 'position': 0}
{'xy': (0, 2), 'capacity': 6, 'neighbours': [{'node': (0, 0), 'position': 0}, {'node': (0, 5), 'position': 2}, {'node': (2, 2), 'position': 4}], 'is_completed': False, 'position': 1}
{'xy': (0, 5), 'capacity': 5, 'neighbours': [{'node': (0, 2), 'position': 1}, {'node': (2, 5), 'position': 5}], 'is_completed': False, 'position': 2}
{'xy': (2, 0), 'capacity': 5, 'neighbours': [{'node': (2, 2), 'position': 4}, {'node': (0, 0), 'position': 0}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 3}
{'xy': (2, 2), 'capacity': 7, 'neighbours': [{'node': (2, 0), 'position': 3}, {'node': (2, 5), 'position': 5}, {'node': (0, 2), 'position': 1}, {'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 4}
{'xy': (2, 5), 'capacity': 6, 'neighbours': [{'node': (2, 2), 'position': 4}, {'node': (0, 5), 'position': 2}, {'node': (4, 5), 'position': 8}], 'is_completed': False, 'position': 5}
{'xy': (4, 0), 'capacity': 7, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (2, 0), 'position': 3}, {'node': (6, 0), 'position': 9}], 'is_completed': False, 'position': 6}
{'xy': (4, 2), 'capacity': 7, 'neighbours': [{'node': (4, 0), 'position': 6}, {'node': (4, 5), 'position': 8}, {'node': (2, 2), 'position': 4}, {'node': (6, 2), 'position': 10}], 'is_completed': False, 'position': 7}
{'xy': (4, 5), 'capacity': 8, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (2, 5), 'position': 5}, {'node': (6, 5), 'position': 11}], 'is_completed': False, 'position': 8}
{'xy': (6, 0), 'capacity': 6, 'neighbours': [{'node': (6, 2), 'position': 10}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 9}
{'xy': (6, 2), 'capacity': 7, 'neighbours': [{'node': (6, 0), 'position': 9}, {'node': (6, 5), 'position': 11}, {'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 10}
{'xy': (6, 5), 'capacity': 6, 'neighbours': [{'node': (6, 2), 'position': 10}, {'node': (4, 5), 'position': 8}], 'is_completed': False, 'position': 11}


Iterating


Checking for
	{'xy': (0, 0), 'capacity': 2, 'neighbours': [{'node': (0, 2), 'position': 1}, {'node': (2, 0), 'position': 3}], 'is_completed': False, 'position': 0}
Lemma unsatisfied

Checking for
	{'xy': (0, 2), 'capacity': 6, 'neighbours': [{'node': (0, 0), 'position': 0}, {'node': (0, 5), 'position': 2}, {'node': (2, 2), 'position': 4}], 'is_completed': False, 'position': 1}
Lemma unsatisfied

Checking for
	{'xy': (0, 5), 'capacity': 5, 'neighbours': [{'node': (0, 2), 'position': 1}, {'node': (2, 5), 'position': 5}], 'is_completed': False, 'position': 2}
Node: (0, 5) satisfies lemma. Building bridges.
Trying to build bridge from (0, 5) = 5 to (0, 2) = 6
Updating neighbours on the side of ends: [(0, 2), (0, 5)]
(0, 3)
[]
(0, 4)
[]
Bridge from (0, 5) = 5 to (0, 2) = 6 built
Affected nodes:
	{'xy': (0, 5), 'capacity': 4, 'neighbours': [{'node': (0, 2), 'position': 1}, {'node': (2, 5), 'position': 5}], 'is_completed': False, 'position': 2}
	{'xy': (0, 2), 'capacity': 5, 'neighbours': [{'node': (0, 0), 'position': 0}, {'node': (0, 5), 'position': 2}, {'node': (2, 2), 'position': 4}], 'is_completed': False, 'position': 1}
Bridge:
	{'ends': [(0, 2), (0, 5)], 'val': -1, 'is_hor': True}
Trying to build bridge from (0, 5) = 5 to (2, 5) = 6
Updating neighbours on the side of ends: [(0, 5), (2, 5)]
1 5
(1, 5)
[]
Bridge from (0, 5) = 5 to (2, 5) = 6 built
Affected nodes:
	{'xy': (0, 5), 'capacity': 3, 'neighbours': [{'node': (0, 2), 'position': 1}, {'node': (2, 5), 'position': 5}], 'is_completed': False, 'position': 2}
	{'xy': (2, 5), 'capacity': 5, 'neighbours': [{'node': (2, 2), 'position': 4}, {'node': (0, 5), 'position': 2}, {'node': (4, 5), 'position': 8}], 'is_completed': False, 'position': 5}
Bridge:
	{'ends': [(0, 5), (2, 5)], 'val': -1, 'is_hor': False}
2.6--5.
.....|.
5.7..6.
.......
7.7..8.
.......
6.7..6.

Checking for
	{'xy': (2, 0), 'capacity': 5, 'neighbours': [{'node': (2, 2), 'position': 4}, {'node': (0, 0), 'position': 0}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 3}
Lemma unsatisfied

Checking for
	{'xy': (2, 2), 'capacity': 7, 'neighbours': [{'node': (2, 0), 'position': 3}, {'node': (2, 5), 'position': 5}, {'node': (0, 2), 'position': 1}, {'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 4}
Lemma unsatisfied

Checking for
	{'xy': (2, 5), 'capacity': 5, 'neighbours': [{'node': (2, 2), 'position': 4}, {'node': (0, 5), 'position': 2}, {'node': (4, 5), 'position': 8}], 'is_completed': False, 'position': 5}
Lemma unsatisfied

Checking for
	{'xy': (4, 0), 'capacity': 7, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (2, 0), 'position': 3}, {'node': (6, 0), 'position': 9}], 'is_completed': False, 'position': 6}
Node: (4, 0) satisfies lemma. Building bridges.
Trying to build bridge from (4, 0) = 7 to (4, 2) = 7
Updating neighbours on the side of ends: [(4, 0), (4, 2)]
(4, 1)
[]
Bridge from (4, 0) = 7 to (4, 2) = 7 built
Affected nodes:
	{'xy': (4, 0), 'capacity': 6, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (2, 0), 'position': 3}, {'node': (6, 0), 'position': 9}], 'is_completed': False, 'position': 6}
	{'xy': (4, 2), 'capacity': 6, 'neighbours': [{'node': (4, 0), 'position': 6}, {'node': (4, 5), 'position': 8}, {'node': (2, 2), 'position': 4}, {'node': (6, 2), 'position': 10}], 'is_completed': False, 'position': 7}
Bridge:
	{'ends': [(4, 0), (4, 2)], 'val': -1, 'is_hor': True}
Trying to build bridge from (4, 0) = 7 to (2, 0) = 5
Updating neighbours on the side of ends: [(2, 0), (4, 0)]
3 0
(3, 0)
[]
Bridge from (4, 0) = 7 to (2, 0) = 5 built
Affected nodes:
	{'xy': (4, 0), 'capacity': 5, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (2, 0), 'position': 3}, {'node': (6, 0), 'position': 9}], 'is_completed': False, 'position': 6}
	{'xy': (2, 0), 'capacity': 4, 'neighbours': [{'node': (2, 2), 'position': 4}, {'node': (0, 0), 'position': 0}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 3}
Bridge:
	{'ends': [(2, 0), (4, 0)], 'val': -1, 'is_hor': False}
Trying to build bridge from (4, 0) = 7 to (6, 0) = 6
Updating neighbours on the side of ends: [(4, 0), (6, 0)]
5 0
(5, 0)
[]
Bridge from (4, 0) = 7 to (6, 0) = 6 built
Affected nodes:
	{'xy': (4, 0), 'capacity': 4, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (2, 0), 'position': 3}, {'node': (6, 0), 'position': 9}], 'is_completed': False, 'position': 6}
	{'xy': (6, 0), 'capacity': 5, 'neighbours': [{'node': (6, 2), 'position': 10}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 9}
Bridge:
	{'ends': [(4, 0), (6, 0)], 'val': -1, 'is_hor': False}
2.6--5.
.....|.
5.7..6.
|......
7-7..8.
|......
6.7..6.

Checking for
	{'xy': (4, 2), 'capacity': 6, 'neighbours': [{'node': (4, 0), 'position': 6}, {'node': (4, 5), 'position': 8}, {'node': (2, 2), 'position': 4}, {'node': (6, 2), 'position': 10}], 'is_completed': False, 'position': 7}
Lemma unsatisfied

Checking for
	{'xy': (4, 5), 'capacity': 8, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (2, 5), 'position': 5}, {'node': (6, 5), 'position': 11}], 'is_completed': False, 'position': 8}
Node: (4, 5) satisfies lemma. Building bridges.
Trying to build bridge from (4, 5) = 8 to (4, 2) = 7
Updating neighbours on the side of ends: [(4, 2), (4, 5)]
(4, 3)
[]
(4, 4)
[]
Bridge from (4, 5) = 8 to (4, 2) = 7 built
Affected nodes:
	{'xy': (4, 5), 'capacity': 7, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (2, 5), 'position': 5}, {'node': (6, 5), 'position': 11}], 'is_completed': False, 'position': 8}
	{'xy': (4, 2), 'capacity': 5, 'neighbours': [{'node': (4, 0), 'position': 6}, {'node': (4, 5), 'position': 8}, {'node': (2, 2), 'position': 4}, {'node': (6, 2), 'position': 10}], 'is_completed': False, 'position': 7}
Bridge:
	{'ends': [(4, 2), (4, 5)], 'val': -1, 'is_hor': True}
Trying to build bridge from (4, 5) = 8 to (2, 5) = 6
Updating neighbours on the side of ends: [(2, 5), (4, 5)]
3 5
(3, 5)
[]
Bridge from (4, 5) = 8 to (2, 5) = 6 built
Affected nodes:
	{'xy': (4, 5), 'capacity': 6, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (2, 5), 'position': 5}, {'node': (6, 5), 'position': 11}], 'is_completed': False, 'position': 8}
	{'xy': (2, 5), 'capacity': 4, 'neighbours': [{'node': (2, 2), 'position': 4}, {'node': (0, 5), 'position': 2}, {'node': (4, 5), 'position': 8}], 'is_completed': False, 'position': 5}
Bridge:
	{'ends': [(2, 5), (4, 5)], 'val': -1, 'is_hor': False}
Trying to build bridge from (4, 5) = 8 to (6, 5) = 6
Updating neighbours on the side of ends: [(4, 5), (6, 5)]
5 5
(5, 5)
[]
Bridge from (4, 5) = 8 to (6, 5) = 6 built
Affected nodes:
	{'xy': (4, 5), 'capacity': 5, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (2, 5), 'position': 5}, {'node': (6, 5), 'position': 11}], 'is_completed': False, 'position': 8}
	{'xy': (6, 5), 'capacity': 5, 'neighbours': [{'node': (6, 2), 'position': 10}, {'node': (4, 5), 'position': 8}], 'is_completed': False, 'position': 11}
Bridge:
	{'ends': [(4, 5), (6, 5)], 'val': -1, 'is_hor': False}
2.6--5.
.....|.
5.7..6.
|....|.
7-7--8.
|....|.
6.7..6.

Checking for
	{'xy': (6, 0), 'capacity': 5, 'neighbours': [{'node': (6, 2), 'position': 10}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 9}
Node: (6, 0) satisfies lemma. Building bridges.
Trying to build bridge from (6, 0) = 6 to (6, 2) = 7
Updating neighbours on the side of ends: [(6, 0), (6, 2)]
(6, 1)
[]
Bridge from (6, 0) = 6 to (6, 2) = 7 built
Affected nodes:
	{'xy': (6, 0), 'capacity': 4, 'neighbours': [{'node': (6, 2), 'position': 10}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 9}
	{'xy': (6, 2), 'capacity': 6, 'neighbours': [{'node': (6, 0), 'position': 9}, {'node': (6, 5), 'position': 11}, {'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 10}
Bridge:
	{'ends': [(6, 0), (6, 2)], 'val': -1, 'is_hor': True}
Trying to build bridge from (6, 0) = 6 to (4, 0) = 7
Updating neighbours on the side of ends: [(4, 0), (6, 0)]
5 0
(5, 0)
[]
Bridge from (6, 0) = 6 to (4, 0) = 7 built
Affected nodes:
	{'xy': (6, 0), 'capacity': 3, 'neighbours': [{'node': (6, 2), 'position': 10}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 9}
	{'xy': (4, 0), 'capacity': 3, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (2, 0), 'position': 3}, {'node': (6, 0), 'position': 9}], 'is_completed': False, 'position': 6}
Bridge:
	{'ends': [(4, 0), (6, 0)], 'val': -2, 'is_hor': False}
2.6--5.
.....|.
5.7..6.
|....|.
7-7--8.
"....|.
6-7..6.

Checking for
	{'xy': (6, 2), 'capacity': 6, 'neighbours': [{'node': (6, 0), 'position': 9}, {'node': (6, 5), 'position': 11}, {'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 10}
Lemma unsatisfied

Checking for
	{'xy': (6, 5), 'capacity': 5, 'neighbours': [{'node': (6, 2), 'position': 10}, {'node': (4, 5), 'position': 8}], 'is_completed': False, 'position': 11}
Node: (6, 5) satisfies lemma. Building bridges.
Trying to build bridge from (6, 5) = 6 to (6, 2) = 7
Updating neighbours on the side of ends: [(6, 2), (6, 5)]
(6, 3)
[]
(6, 4)
[]
Bridge from (6, 5) = 6 to (6, 2) = 7 built
Affected nodes:
	{'xy': (6, 5), 'capacity': 4, 'neighbours': [{'node': (6, 2), 'position': 10}, {'node': (4, 5), 'position': 8}], 'is_completed': False, 'position': 11}
	{'xy': (6, 2), 'capacity': 5, 'neighbours': [{'node': (6, 0), 'position': 9}, {'node': (6, 5), 'position': 11}, {'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 10}
Bridge:
	{'ends': [(6, 2), (6, 5)], 'val': -1, 'is_hor': True}
Trying to build bridge from (6, 5) = 6 to (4, 5) = 8
Updating neighbours on the side of ends: [(4, 5), (6, 5)]
5 5
(5, 5)
[]
Bridge from (6, 5) = 6 to (4, 5) = 8 built
Affected nodes:
	{'xy': (6, 5), 'capacity': 3, 'neighbours': [{'node': (6, 2), 'position': 10}, {'node': (4, 5), 'position': 8}], 'is_completed': False, 'position': 11}
	{'xy': (4, 5), 'capacity': 4, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (2, 5), 'position': 5}, {'node': (6, 5), 'position': 11}], 'is_completed': False, 'position': 8}
Bridge:
	{'ends': [(4, 5), (6, 5)], 'val': -2, 'is_hor': False}
2.6--5.
.....|.
5.7..6.
|....|.
7-7--8.
"....".
6-7--6.



Iterating


Checking for
	{'xy': (0, 0), 'capacity': 2, 'neighbours': [{'node': (0, 2), 'position': 1}, {'node': (2, 0), 'position': 3}], 'is_completed': False, 'position': 0}
Lemma unsatisfied

Checking for
	{'xy': (0, 2), 'capacity': 5, 'neighbours': [{'node': (0, 0), 'position': 0}, {'node': (0, 5), 'position': 2}, {'node': (2, 2), 'position': 4}], 'is_completed': False, 'position': 1}
Lemma unsatisfied

Checking for
	{'xy': (0, 5), 'capacity': 3, 'neighbours': [{'node': (0, 2), 'position': 1}, {'node': (2, 5), 'position': 5}], 'is_completed': False, 'position': 2}
Lemma unsatisfied

Checking for
	{'xy': (2, 0), 'capacity': 4, 'neighbours': [{'node': (2, 2), 'position': 4}, {'node': (0, 0), 'position': 0}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 3}
Lemma unsatisfied

Checking for
	{'xy': (2, 2), 'capacity': 7, 'neighbours': [{'node': (2, 0), 'position': 3}, {'node': (2, 5), 'position': 5}, {'node': (0, 2), 'position': 1}, {'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 4}
Lemma unsatisfied

Checking for
	{'xy': (2, 5), 'capacity': 4, 'neighbours': [{'node': (2, 2), 'position': 4}, {'node': (0, 5), 'position': 2}, {'node': (4, 5), 'position': 8}], 'is_completed': False, 'position': 5}
Lemma unsatisfied

Checking for
	{'xy': (4, 0), 'capacity': 3, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (2, 0), 'position': 3}, {'node': (6, 0), 'position': 9}], 'is_completed': False, 'position': 6}
Lemma unsatisfied

Checking for
	{'xy': (4, 2), 'capacity': 5, 'neighbours': [{'node': (4, 0), 'position': 6}, {'node': (4, 5), 'position': 8}, {'node': (2, 2), 'position': 4}, {'node': (6, 2), 'position': 10}], 'is_completed': False, 'position': 7}
Lemma unsatisfied

Checking for
	{'xy': (4, 5), 'capacity': 4, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (2, 5), 'position': 5}, {'node': (6, 5), 'position': 11}], 'is_completed': False, 'position': 8}
Lemma unsatisfied

Checking for
	{'xy': (6, 0), 'capacity': 3, 'neighbours': [{'node': (6, 2), 'position': 10}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 9}
Lemma unsatisfied

Checking for
	{'xy': (6, 2), 'capacity': 5, 'neighbours': [{'node': (6, 0), 'position': 9}, {'node': (6, 5), 'position': 11}, {'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 10}
Lemma unsatisfied

Checking for
	{'xy': (6, 5), 'capacity': 3, 'neighbours': [{'node': (6, 2), 'position': 10}, {'node': (4, 5), 'position': 8}], 'is_completed': False, 'position': 11}
Lemma unsatisfied

2.6--5.
.....|.
5.7..6.
|....|.
7-7--8.
"....".
6-7--6.

{'xy': (0, 0), 'capacity': 2, 'neighbours': [{'node': (0, 2), 'position': 1}, {'node': (2, 0), 'position': 3}], 'is_completed': False, 'position': 0}
{'xy': (0, 2), 'capacity': 5, 'neighbours': [{'node': (0, 0), 'position': 0}, {'node': (0, 5), 'position': 2}, {'node': (2, 2), 'position': 4}], 'is_completed': False, 'position': 1}
{'xy': (0, 5), 'capacity': 3, 'neighbours': [{'node': (0, 2), 'position': 1}, {'node': (2, 5), 'position': 5}], 'is_completed': False, 'position': 2}
{'xy': (2, 0), 'capacity': 4, 'neighbours': [{'node': (2, 2), 'position': 4}, {'node': (0, 0), 'position': 0}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 3}
{'xy': (2, 2), 'capacity': 7, 'neighbours': [{'node': (2, 0), 'position': 3}, {'node': (2, 5), 'position': 5}, {'node': (0, 2), 'position': 1}, {'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 4}
{'xy': (2, 5), 'capacity': 4, 'neighbours': [{'node': (2, 2), 'position': 4}, {'node': (0, 5), 'position': 2}, {'node': (4, 5), 'position': 8}], 'is_completed': False, 'position': 5}
{'xy': (4, 0), 'capacity': 3, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (2, 0), 'position': 3}, {'node': (6, 0), 'position': 9}], 'is_completed': False, 'position': 6}
{'xy': (4, 2), 'capacity': 5, 'neighbours': [{'node': (4, 0), 'position': 6}, {'node': (4, 5), 'position': 8}, {'node': (2, 2), 'position': 4}, {'node': (6, 2), 'position': 10}], 'is_completed': False, 'position': 7}
{'xy': (4, 5), 'capacity': 4, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (2, 5), 'position': 5}, {'node': (6, 5), 'position': 11}], 'is_completed': False, 'position': 8}
{'xy': (6, 0), 'capacity': 3, 'neighbours': [{'node': (6, 2), 'position': 10}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 9}
{'xy': (6, 2), 'capacity': 5, 'neighbours': [{'node': (6, 0), 'position': 9}, {'node': (6, 5), 'position': 11}, {'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 10}
{'xy': (6, 5), 'capacity': 3, 'neighbours': [{'node': (6, 2), 'position': 10}, {'node': (4, 5), 'position': 8}], 'is_completed': False, 'position': 11}
{'ends': [(0, 2), (0, 5)], 'val': -1, 'is_hor': True}
{'ends': [(0, 5), (2, 5)], 'val': -1, 'is_hor': False}
{'ends': [(4, 0), (4, 2)], 'val': -1, 'is_hor': True}
{'ends': [(2, 0), (4, 0)], 'val': -1, 'is_hor': False}
{'ends': [(4, 0), (6, 0)], 'val': -2, 'is_hor': False}
{'ends': [(4, 2), (4, 5)], 'val': -1, 'is_hor': True}
{'ends': [(2, 5), (4, 5)], 'val': -1, 'is_hor': False}
{'ends': [(4, 5), (6, 5)], 'val': -2, 'is_hor': False}
{'ends': [(6, 0), (6, 2)], 'val': -1, 'is_hor': True}
{'ends': [(6, 2), (6, 5)], 'val': -1, 'is_hor': True}
