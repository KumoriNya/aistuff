[3, 0, 0, 0, 0, 5, 0, 0, 6, 0]
[0, 0, 5, 0, 7, 0, 4, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 7, 0, 9, 0, 7, 0]
[5, 0, 8, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 2, 0]
[5, 0, 8, 0, 0, 0, 8, 0, 0, 4]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 5, 0, 7, 0, 9, 0, 3, 0]
[3, 0, 0, 3, 0, 1, 0, 0, 0, 0]
Finding for (0, 0) = 3
All neighbours for (0, 0) = 3: [(0, 5), (4, 0)]
Finding for (0, 5) = 5
All neighbours for (0, 5) = 5: [(0, 0), (0, 8), (9, 5)]
Finding for (0, 8) = 6
All neighbours for (0, 8) = 6: [(0, 5), (3, 8)]
Finding for (1, 2) = 5
All neighbours for (1, 2) = 5: [(1, 4), (4, 2)]
Finding for (1, 4) = 7
All neighbours for (1, 4) = 7: [(1, 2), (1, 6), (3, 4)]
Finding for (1, 6) = 4
All neighbours for (1, 6) = 4: [(1, 4), (3, 6)]
Finding for (2, 9) = 2
All neighbours for (2, 9) = 2: [(6, 9)]
Finding for (3, 4) = 7
All neighbours for (3, 4) = 7: [(3, 6), (1, 4), (8, 4)]
Finding for (3, 6) = 9
All neighbours for (3, 6) = 9: [(3, 4), (3, 8), (1, 6), (6, 6)]
Finding for (3, 8) = 7
All neighbours for (3, 8) = 7: [(3, 6), (0, 8), (5, 8)]
Finding for (4, 0) = 5
All neighbours for (4, 0) = 5: [(4, 2), (0, 0), (6, 0)]
Finding for (4, 2) = 8
All neighbours for (4, 2) = 8: [(4, 0), (1, 2), (6, 2)]
Finding for (5, 8) = 2
All neighbours for (5, 8) = 2: [(3, 8), (8, 8)]
Finding for (6, 0) = 5
All neighbours for (6, 0) = 5: [(6, 2), (4, 0), (9, 0)]
Finding for (6, 2) = 8
All neighbours for (6, 2) = 8: [(6, 0), (6, 6), (4, 2), (8, 2)]
Finding for (6, 6) = 8
All neighbours for (6, 6) = 8: [(6, 2), (6, 9), (3, 6), (8, 6)]
Finding for (6, 9) = 4
All neighbours for (6, 9) = 4: [(6, 6), (2, 9)]
Finding for (8, 2) = 5
All neighbours for (8, 2) = 5: [(8, 4), (6, 2)]
Finding for (8, 4) = 7
All neighbours for (8, 4) = 7: [(8, 2), (8, 6), (3, 4)]
Finding for (8, 6) = 9
All neighbours for (8, 6) = 9: [(8, 4), (8, 8), (6, 6)]
Finding for (8, 8) = 3
All neighbours for (8, 8) = 3: [(8, 6), (5, 8)]
Finding for (9, 0) = 3
All neighbours for (9, 0) = 3: [(9, 3), (6, 0)]
Finding for (9, 3) = 3
All neighbours for (9, 3) = 3: [(9, 0), (9, 5)]
Finding for (9, 5) = 1
All neighbours for (9, 5) = 1: [(9, 3), (0, 5)]
Initialisation complete:
{'xy': (0, 0), 'value': 3, 'capacity': 3, 'neighbours': [{'node': (0, 5), 'position': 1}, {'node': (4, 0), 'position': 10}], 'is_completed': False, 'position': 0}
{'xy': (0, 5), 'value': 5, 'capacity': 5, 'neighbours': [{'node': (0, 0), 'position': 0}, {'node': (0, 8), 'position': 2}, {'node': (9, 5), 'position': 23}], 'is_completed': False, 'position': 1}
{'xy': (0, 8), 'value': 6, 'capacity': 6, 'neighbours': [{'node': (0, 5), 'position': 1}, {'node': (3, 8), 'position': 9}], 'is_completed': False, 'position': 2}
{'xy': (1, 2), 'value': 5, 'capacity': 5, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (4, 2), 'position': 11}], 'is_completed': False, 'position': 3}
{'xy': (1, 4), 'value': 7, 'capacity': 7, 'neighbours': [{'node': (1, 2), 'position': 3}, {'node': (1, 6), 'position': 5}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 4}
{'xy': (1, 6), 'value': 4, 'capacity': 4, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (3, 6), 'position': 8}], 'is_completed': False, 'position': 5}
{'xy': (2, 9), 'value': 2, 'capacity': 2, 'neighbours': [{'node': (6, 9), 'position': 16}], 'is_completed': False, 'position': 6}
{'xy': (3, 4), 'value': 7, 'capacity': 7, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (1, 4), 'position': 4}, {'node': (8, 4), 'position': 18}], 'is_completed': False, 'position': 7}
{'xy': (3, 6), 'value': 9, 'capacity': 9, 'neighbours': [{'node': (3, 4), 'position': 7}, {'node': (3, 8), 'position': 9}, {'node': (1, 6), 'position': 5}, {'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 8}
{'xy': (3, 8), 'value': 7, 'capacity': 7, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (0, 8), 'position': 2}, {'node': (5, 8), 'position': 12}], 'is_completed': False, 'position': 9}
{'xy': (4, 0), 'value': 5, 'capacity': 5, 'neighbours': [{'node': (4, 2), 'position': 11}, {'node': (0, 0), 'position': 0}, {'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 10}
{'xy': (4, 2), 'value': 8, 'capacity': 8, 'neighbours': [{'node': (4, 0), 'position': 10}, {'node': (1, 2), 'position': 3}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 11}
{'xy': (5, 8), 'value': 2, 'capacity': 2, 'neighbours': [{'node': (3, 8), 'position': 9}, {'node': (8, 8), 'position': 20}], 'is_completed': False, 'position': 12}
{'xy': (6, 0), 'value': 5, 'capacity': 5, 'neighbours': [{'node': (6, 2), 'position': 14}, {'node': (4, 0), 'position': 10}, {'node': (9, 0), 'position': 21}], 'is_completed': False, 'position': 13}
{'xy': (6, 2), 'value': 8, 'capacity': 8, 'neighbours': [{'node': (6, 0), 'position': 13}, {'node': (6, 6), 'position': 15}, {'node': (4, 2), 'position': 11}, {'node': (8, 2), 'position': 17}], 'is_completed': False, 'position': 14}
{'xy': (6, 6), 'value': 8, 'capacity': 8, 'neighbours': [{'node': (6, 2), 'position': 14}, {'node': (6, 9), 'position': 16}, {'node': (3, 6), 'position': 8}, {'node': (8, 6), 'position': 19}], 'is_completed': False, 'position': 15}
{'xy': (6, 9), 'value': 4, 'capacity': 4, 'neighbours': [{'node': (6, 6), 'position': 15}, {'node': (2, 9), 'position': 6}], 'is_completed': False, 'position': 16}
{'xy': (8, 2), 'value': 5, 'capacity': 5, 'neighbours': [{'node': (8, 4), 'position': 18}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 17}
{'xy': (8, 4), 'value': 7, 'capacity': 7, 'neighbours': [{'node': (8, 2), 'position': 17}, {'node': (8, 6), 'position': 19}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 18}
{'xy': (8, 6), 'value': 9, 'capacity': 9, 'neighbours': [{'node': (8, 4), 'position': 18}, {'node': (8, 8), 'position': 20}, {'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 19}
{'xy': (8, 8), 'value': 3, 'capacity': 3, 'neighbours': [{'node': (8, 6), 'position': 19}, {'node': (5, 8), 'position': 12}], 'is_completed': False, 'position': 20}
{'xy': (9, 0), 'value': 3, 'capacity': 3, 'neighbours': [{'node': (9, 3), 'position': 22}, {'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 21}
{'xy': (9, 3), 'value': 3, 'capacity': 3, 'neighbours': [{'node': (9, 0), 'position': 21}, {'node': (9, 5), 'position': 23}], 'is_completed': False, 'position': 22}
{'xy': (9, 5), 'value': 1, 'capacity': 1, 'neighbours': [{'node': (9, 3), 'position': 22}, {'node': (0, 5), 'position': 1}], 'is_completed': False, 'position': 23}


Iterating


Checking for
	{'xy': (0, 0), 'value': 3, 'capacity': 3, 'neighbours': [{'node': (0, 5), 'position': 1}, {'node': (4, 0), 'position': 10}], 'is_completed': False, 'position': 0}
Lemma unsatisfied

Checking for
	{'xy': (0, 5), 'value': 5, 'capacity': 5, 'neighbours': [{'node': (0, 0), 'position': 0}, {'node': (0, 8), 'position': 2}, {'node': (9, 5), 'position': 23}], 'is_completed': False, 'position': 1}
Lemma unsatisfied

Checking for
	{'xy': (0, 8), 'value': 6, 'capacity': 6, 'neighbours': [{'node': (0, 5), 'position': 1}, {'node': (3, 8), 'position': 9}], 'is_completed': False, 'position': 2}
Node: (0, 8) satisfies lemma. Building bridges.
Trying to build bridge from (0, 8) = 6 to (0, 5) = 5
Updating neighbours on the side of ends: [(0, 5), (0, 8)]
(0, 6)
[(1, 6)]
(0, 7)
[]
Bridge from (0, 8) = 6 to (0, 5) = 5 built
Affected nodes:
	{'xy': (0, 8), 'value': 6, 'capacity': 3, 'neighbours': [{'node': (0, 5), 'position': 1}, {'node': (3, 8), 'position': 9}], 'is_completed': False, 'position': 2}
	{'xy': (0, 5), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (0, 0), 'position': 0}, {'node': (0, 8), 'position': 2}, {'node': (9, 5), 'position': 23}], 'is_completed': False, 'position': 1}
Bridge:
	{'ends': [(0, 5), (0, 8)], 'val': -3, 'is_hor': True}
============

3....5EE6.
..5.7.4...
.........2
....7.9.7.
5.8.......
........2.
5.8...8..4
..........
..5.7.9.3.
3..3.1....

Checking for
	{'xy': (1, 2), 'value': 5, 'capacity': 5, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (4, 2), 'position': 11}], 'is_completed': False, 'position': 3}
Node: (1, 2) satisfies lemma. Building bridges.
Trying to build bridge from (1, 2) = 5 to (1, 4) = 7
Updating neighbours on the side of ends: [(1, 2), (1, 4)]
(1, 3)
[(9, 3)]
Bridge from (1, 2) = 5 to (1, 4) = 7 built
Affected nodes:
	{'xy': (1, 2), 'value': 5, 'capacity': 4, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (4, 2), 'position': 11}], 'is_completed': False, 'position': 3}
	{'xy': (1, 4), 'value': 7, 'capacity': 6, 'neighbours': [{'node': (1, 2), 'position': 3}, {'node': (1, 6), 'position': 5}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 4}
Bridge:
	{'ends': [(1, 2), (1, 4)], 'val': -1, 'is_hor': True}
============

Trying to build bridge from (1, 2) = 5 to (4, 2) = 8
Updating neighbours on the side of ends: [(1, 2), (4, 2)]
2 2
(2, 2)
[(2, 9)]
(3, 2)
[(3, 4)]
Bridge from (1, 2) = 5 to (4, 2) = 8 built
Affected nodes:
	{'xy': (1, 2), 'value': 5, 'capacity': 3, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (4, 2), 'position': 11}], 'is_completed': False, 'position': 3}
	{'xy': (4, 2), 'value': 8, 'capacity': 7, 'neighbours': [{'node': (4, 0), 'position': 10}, {'node': (1, 2), 'position': 3}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 11}
Bridge:
	{'ends': [(1, 2), (4, 2)], 'val': -1, 'is_hor': False}
============

3....5EE6.
..5-7.4...
..|......2
..|.7.9.7.
5.8.......
........2.
5.8...8..4
..........
..5.7.9.3.
3..3.1....

Checking for
	{'xy': (1, 4), 'value': 7, 'capacity': 6, 'neighbours': [{'node': (1, 2), 'position': 3}, {'node': (1, 6), 'position': 5}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 4}
Lemma unsatisfied

Checking for
	{'xy': (1, 6), 'value': 4, 'capacity': 4, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (3, 6), 'position': 8}], 'is_completed': False, 'position': 5}
Node: (1, 6) satisfies lemma. Building bridges.
Trying to build bridge from (1, 6) = 4 to (1, 4) = 7
Updating neighbours on the side of ends: [(1, 4), (1, 6)]
(1, 5)
[(0, 5), (9, 5)]
Removed nodes (0, 5) and (9, 5) from their neighbours list
	{'xy': (0, 5), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (0, 0), 'position': 0}], 'is_completed': False, 'position': 1}
	{'xy': (9, 5), 'value': 1, 'capacity': 1, 'neighbours': [{'node': (9, 3), 'position': 22}], 'is_completed': False, 'position': 23}
Bridge from (1, 6) = 4 to (1, 4) = 7 built
Affected nodes:
	{'xy': (1, 6), 'value': 4, 'capacity': 3, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (3, 6), 'position': 8}], 'is_completed': False, 'position': 5}
	{'xy': (1, 4), 'value': 7, 'capacity': 5, 'neighbours': [{'node': (1, 2), 'position': 3}, {'node': (1, 6), 'position': 5}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 4}
Bridge:
	{'ends': [(1, 4), (1, 6)], 'val': -1, 'is_hor': True}
============

Trying to build bridge from (1, 6) = 4 to (3, 6) = 9
Updating neighbours on the side of ends: [(1, 6), (3, 6)]
2 6
(2, 6)
[(2, 9)]
Bridge from (1, 6) = 4 to (3, 6) = 9 built
Affected nodes:
	{'xy': (1, 6), 'value': 4, 'capacity': 2, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (3, 6), 'position': 8}], 'is_completed': False, 'position': 5}
	{'xy': (3, 6), 'value': 9, 'capacity': 8, 'neighbours': [{'node': (3, 4), 'position': 7}, {'node': (3, 8), 'position': 9}, {'node': (1, 6), 'position': 5}, {'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 8}
Bridge:
	{'ends': [(1, 6), (3, 6)], 'val': -1, 'is_hor': False}
============

3....5EE6.
..5-7-4...
..|...|..2
..|.7.9.7.
5.8.......
........2.
5.8...8..4
..........
..5.7.9.3.
3..3.1....

Checking for
	{'xy': (2, 9), 'value': 2, 'capacity': 2, 'neighbours': [{'node': (6, 9), 'position': 16}], 'is_completed': False, 'position': 6}
Node: (2, 9) satisfies lemma. Building bridges.
Trying to build bridge from (2, 9) = 2 to (6, 9) = 4
Updating neighbours on the side of ends: [(2, 9), (6, 9)]
3 9
(3, 9)
[(3, 8)]
(4, 9)
[(4, 2)]
(5, 9)
[(5, 8)]
Bridge from (2, 9) = 2 to (6, 9) = 4 built
Affected nodes:
	{'xy': (2, 9), 'value': 2, 'capacity': 0, 'neighbours': [{'node': (6, 9), 'position': 16}], 'is_completed': False, 'position': 6}
	{'xy': (6, 9), 'value': 4, 'capacity': 2, 'neighbours': [{'node': (6, 6), 'position': 15}, {'node': (2, 9), 'position': 6}], 'is_completed': False, 'position': 16}
Bridge:
	{'ends': [(2, 9), (6, 9)], 'val': -2, 'is_hor': False}
============

Removing
	{'xy': (2, 9), 'value': 2, 'capacity': 0, 'neighbours': [{'node': (6, 9), 'position': 16}], 'is_completed': False, 'position': 6}
	from:
[{'node': (6, 6), 'position': 15}, {'node': (2, 9), 'position': 6}]
Removed
	{'xy': (2, 9), 'value': 2, 'capacity': 0, 'neighbours': [{'node': (6, 9), 'position': 16}], 'is_completed': False, 'position': 6}
from
	{'xy': (6, 9), 'value': 4, 'capacity': 2, 'neighbours': [{'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 16}
3....5EE6.
..5-7-4...
..|...|..2
..|.7.9.7"
5.8......"
........2"
5.8...8..4
..........
..5.7.9.3.
3..3.1....

Checking for
	{'xy': (3, 4), 'value': 7, 'capacity': 7, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (1, 4), 'position': 4}, {'node': (8, 4), 'position': 18}], 'is_completed': False, 'position': 7}
Node: (3, 4) satisfies lemma. Building bridges.
Trying to build bridge from (3, 4) = 7 to (3, 6) = 9
Updating neighbours on the side of ends: [(3, 4), (3, 6)]
(3, 5)
[(9, 5)]
Bridge from (3, 4) = 7 to (3, 6) = 9 built
Affected nodes:
	{'xy': (3, 4), 'value': 7, 'capacity': 6, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (1, 4), 'position': 4}, {'node': (8, 4), 'position': 18}], 'is_completed': False, 'position': 7}
	{'xy': (3, 6), 'value': 9, 'capacity': 7, 'neighbours': [{'node': (3, 4), 'position': 7}, {'node': (3, 8), 'position': 9}, {'node': (1, 6), 'position': 5}, {'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 8}
Bridge:
	{'ends': [(3, 4), (3, 6)], 'val': -1, 'is_hor': True}
============

Trying to build bridge from (3, 4) = 7 to (1, 4) = 7
Updating neighbours on the side of ends: [(1, 4), (3, 4)]
2 4
(2, 4)
[]
Bridge from (3, 4) = 7 to (1, 4) = 7 built
Affected nodes:
	{'xy': (3, 4), 'value': 7, 'capacity': 5, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (1, 4), 'position': 4}, {'node': (8, 4), 'position': 18}], 'is_completed': False, 'position': 7}
	{'xy': (1, 4), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (1, 2), 'position': 3}, {'node': (1, 6), 'position': 5}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 4}
Bridge:
	{'ends': [(1, 4), (3, 4)], 'val': -1, 'is_hor': False}
============

Trying to build bridge from (3, 4) = 7 to (8, 4) = 7
Updating neighbours on the side of ends: [(3, 4), (8, 4)]
4 4
(4, 4)
[(4, 2)]
(5, 4)
[(5, 8)]
(6, 4)
[(6, 2), (6, 6)]
Removed nodes (6, 2) and (6, 6) from their neighbours list
	{'xy': (6, 2), 'value': 8, 'capacity': 8, 'neighbours': [{'node': (6, 0), 'position': 13}, {'node': (4, 2), 'position': 11}, {'node': (8, 2), 'position': 17}], 'is_completed': False, 'position': 14}
	{'xy': (6, 6), 'value': 8, 'capacity': 8, 'neighbours': [{'node': (6, 9), 'position': 16}, {'node': (3, 6), 'position': 8}, {'node': (8, 6), 'position': 19}], 'is_completed': False, 'position': 15}
(7, 4)
[]
Bridge from (3, 4) = 7 to (8, 4) = 7 built
Affected nodes:
	{'xy': (3, 4), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (1, 4), 'position': 4}, {'node': (8, 4), 'position': 18}], 'is_completed': False, 'position': 7}
	{'xy': (8, 4), 'value': 7, 'capacity': 6, 'neighbours': [{'node': (8, 2), 'position': 17}, {'node': (8, 6), 'position': 19}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 18}
Bridge:
	{'ends': [(3, 4), (8, 4)], 'val': -1, 'is_hor': False}
============

3....5EE6.
..5-7-4...
..|.|.|..2
..|.7-9.7"
5.8.|...."
....|...2"
5.8.|.8..4
....|.....
..5.7.9.3.
3..3.1....

Checking for
	{'xy': (3, 6), 'value': 9, 'capacity': 7, 'neighbours': [{'node': (3, 4), 'position': 7}, {'node': (3, 8), 'position': 9}, {'node': (1, 6), 'position': 5}, {'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 8}
Lemma unsatisfied

Checking for
	{'xy': (3, 8), 'value': 7, 'capacity': 7, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (0, 8), 'position': 2}, {'node': (5, 8), 'position': 12}], 'is_completed': False, 'position': 9}
Node: (3, 8) satisfies lemma. Building bridges.
Trying to build bridge from (3, 8) = 7 to (3, 6) = 9
Updating neighbours on the side of ends: [(3, 6), (3, 8)]
(3, 7)
[]
Bridge from (3, 8) = 7 to (3, 6) = 9 built
Affected nodes:
	{'xy': (3, 8), 'value': 7, 'capacity': 6, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (0, 8), 'position': 2}, {'node': (5, 8), 'position': 12}], 'is_completed': False, 'position': 9}
	{'xy': (3, 6), 'value': 9, 'capacity': 6, 'neighbours': [{'node': (3, 4), 'position': 7}, {'node': (3, 8), 'position': 9}, {'node': (1, 6), 'position': 5}, {'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 8}
Bridge:
	{'ends': [(3, 6), (3, 8)], 'val': -1, 'is_hor': True}
============

Trying to build bridge from (3, 8) = 7 to (0, 8) = 6
Updating neighbours on the side of ends: [(0, 8), (3, 8)]
1 8
(1, 8)
[(1, 6)]
(2, 8)
[(2, 9)]
Bridge from (3, 8) = 7 to (0, 8) = 6 built
Affected nodes:
	{'xy': (3, 8), 'value': 7, 'capacity': 5, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (0, 8), 'position': 2}, {'node': (5, 8), 'position': 12}], 'is_completed': False, 'position': 9}
	{'xy': (0, 8), 'value': 6, 'capacity': 2, 'neighbours': [{'node': (3, 8), 'position': 9}], 'is_completed': False, 'position': 2}
Bridge:
	{'ends': [(0, 8), (3, 8)], 'val': -1, 'is_hor': False}
============

Trying to build bridge from (3, 8) = 7 to (5, 8) = 2
Updating neighbours on the side of ends: [(3, 8), (5, 8)]
4 8
(4, 8)
[]
Bridge from (3, 8) = 7 to (5, 8) = 2 built
Affected nodes:
	{'xy': (3, 8), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (0, 8), 'position': 2}, {'node': (5, 8), 'position': 12}], 'is_completed': False, 'position': 9}
	{'xy': (5, 8), 'value': 2, 'capacity': 1, 'neighbours': [{'node': (3, 8), 'position': 9}, {'node': (8, 8), 'position': 20}], 'is_completed': False, 'position': 12}
Bridge:
	{'ends': [(3, 8), (5, 8)], 'val': -1, 'is_hor': False}
============

3....5EE6.
..5-7-4.|.
..|.|.|.|2
..|.7-9-7"
5.8.|...|"
....|...2"
5.8.|.8..4
....|.....
..5.7.9.3.
3..3.1....

Checking for
	{'xy': (4, 0), 'value': 5, 'capacity': 5, 'neighbours': [{'node': (4, 2), 'position': 11}, {'node': (0, 0), 'position': 0}, {'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 10}
Lemma unsatisfied

Checking for
	{'xy': (4, 2), 'value': 8, 'capacity': 7, 'neighbours': [{'node': (4, 0), 'position': 10}, {'node': (1, 2), 'position': 3}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 11}
Node: (4, 2) satisfies lemma. Building bridges.
Trying to build bridge from (4, 2) = 8 to (4, 0) = 5
Updating neighbours on the side of ends: [(4, 0), (4, 2)]
(4, 1)
[]
Bridge from (4, 2) = 8 to (4, 0) = 5 built
Affected nodes:
	{'xy': (4, 2), 'value': 8, 'capacity': 6, 'neighbours': [{'node': (4, 0), 'position': 10}, {'node': (1, 2), 'position': 3}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 11}
	{'xy': (4, 0), 'value': 5, 'capacity': 4, 'neighbours': [{'node': (4, 2), 'position': 11}, {'node': (0, 0), 'position': 0}, {'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 10}
Bridge:
	{'ends': [(4, 0), (4, 2)], 'val': -1, 'is_hor': True}
============

Trying to build bridge from (4, 2) = 8 to (1, 2) = 5
Updating neighbours on the side of ends: [(1, 2), (4, 2)]
2 2
(2, 2)
[]
(3, 2)
[(3, 4)]
Bridge from (4, 2) = 8 to (1, 2) = 5 built
Affected nodes:
	{'xy': (4, 2), 'value': 8, 'capacity': 5, 'neighbours': [{'node': (4, 0), 'position': 10}, {'node': (1, 2), 'position': 3}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 11}
	{'xy': (1, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (4, 2), 'position': 11}], 'is_completed': False, 'position': 3}
Bridge:
	{'ends': [(1, 2), (4, 2)], 'val': -2, 'is_hor': False}
============

Trying to build bridge from (4, 2) = 8 to (6, 2) = 8
Updating neighbours on the side of ends: [(4, 2), (6, 2)]
5 2
(5, 2)
[]
Bridge from (4, 2) = 8 to (6, 2) = 8 built
Affected nodes:
	{'xy': (4, 2), 'value': 8, 'capacity': 4, 'neighbours': [{'node': (4, 0), 'position': 10}, {'node': (1, 2), 'position': 3}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 11}
	{'xy': (6, 2), 'value': 8, 'capacity': 7, 'neighbours': [{'node': (6, 0), 'position': 13}, {'node': (4, 2), 'position': 11}, {'node': (8, 2), 'position': 17}], 'is_completed': False, 'position': 14}
Bridge:
	{'ends': [(4, 2), (6, 2)], 'val': -1, 'is_hor': False}
============

3....5EE6.
..5-7-4.|.
..".|.|.|2
..".7-9-7"
5-8.|...|"
..|.|...2"
5.8.|.8..4
....|.....
..5.7.9.3.
3..3.1....

Checking for
	{'xy': (5, 8), 'value': 2, 'capacity': 1, 'neighbours': [{'node': (3, 8), 'position': 9}, {'node': (8, 8), 'position': 20}], 'is_completed': False, 'position': 12}
Lemma unsatisfied

Checking for
	{'xy': (6, 0), 'value': 5, 'capacity': 5, 'neighbours': [{'node': (6, 2), 'position': 14}, {'node': (4, 0), 'position': 10}, {'node': (9, 0), 'position': 21}], 'is_completed': False, 'position': 13}
Lemma unsatisfied

Checking for
	{'xy': (6, 2), 'value': 8, 'capacity': 7, 'neighbours': [{'node': (6, 0), 'position': 13}, {'node': (4, 2), 'position': 11}, {'node': (8, 2), 'position': 17}], 'is_completed': False, 'position': 14}
Node: (6, 2) satisfies lemma. Building bridges.
Trying to build bridge from (6, 2) = 8 to (6, 0) = 5
Updating neighbours on the side of ends: [(6, 0), (6, 2)]
(6, 1)
[]
Bridge from (6, 2) = 8 to (6, 0) = 5 built
Affected nodes:
	{'xy': (6, 2), 'value': 8, 'capacity': 6, 'neighbours': [{'node': (6, 0), 'position': 13}, {'node': (4, 2), 'position': 11}, {'node': (8, 2), 'position': 17}], 'is_completed': False, 'position': 14}
	{'xy': (6, 0), 'value': 5, 'capacity': 4, 'neighbours': [{'node': (6, 2), 'position': 14}, {'node': (4, 0), 'position': 10}, {'node': (9, 0), 'position': 21}], 'is_completed': False, 'position': 13}
Bridge:
	{'ends': [(6, 0), (6, 2)], 'val': -1, 'is_hor': True}
============

Trying to build bridge from (6, 2) = 8 to (4, 2) = 8
Updating neighbours on the side of ends: [(4, 2), (6, 2)]
5 2
(5, 2)
[]
Bridge from (6, 2) = 8 to (4, 2) = 8 built
Affected nodes:
	{'xy': (6, 2), 'value': 8, 'capacity': 5, 'neighbours': [{'node': (6, 0), 'position': 13}, {'node': (4, 2), 'position': 11}, {'node': (8, 2), 'position': 17}], 'is_completed': False, 'position': 14}
	{'xy': (4, 2), 'value': 8, 'capacity': 3, 'neighbours': [{'node': (4, 0), 'position': 10}, {'node': (1, 2), 'position': 3}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 11}
Bridge:
	{'ends': [(4, 2), (6, 2)], 'val': -2, 'is_hor': False}
============

Trying to build bridge from (6, 2) = 8 to (8, 2) = 5
Updating neighbours on the side of ends: [(6, 2), (8, 2)]
7 2
(7, 2)
[]
Bridge from (6, 2) = 8 to (8, 2) = 5 built
Affected nodes:
	{'xy': (6, 2), 'value': 8, 'capacity': 4, 'neighbours': [{'node': (6, 0), 'position': 13}, {'node': (4, 2), 'position': 11}, {'node': (8, 2), 'position': 17}], 'is_completed': False, 'position': 14}
	{'xy': (8, 2), 'value': 5, 'capacity': 4, 'neighbours': [{'node': (8, 4), 'position': 18}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 17}
Bridge:
	{'ends': [(6, 2), (8, 2)], 'val': -1, 'is_hor': False}
============

3....5EE6.
..5-7-4.|.
..".|.|.|2
..".7-9-7"
5-8.|...|"
..".|...2"
5-8.|.8..4
..|.|.....
..5.7.9.3.
3..3.1....

Checking for
	{'xy': (6, 6), 'value': 8, 'capacity': 8, 'neighbours': [{'node': (6, 9), 'position': 16}, {'node': (3, 6), 'position': 8}, {'node': (8, 6), 'position': 19}], 'is_completed': False, 'position': 15}
Node: (6, 6) satisfies lemma. Building bridges.
Trying to build bridge from (6, 6) = 8 to (6, 9) = 4
Updating neighbours on the side of ends: [(6, 6), (6, 9)]
(6, 7)
[]
(6, 8)
[(5, 8), (8, 8)]
Removed nodes (5, 8) and (8, 8) from their neighbours list
	{'xy': (5, 8), 'value': 2, 'capacity': 1, 'neighbours': [{'node': (3, 8), 'position': 9}], 'is_completed': False, 'position': 12}
	{'xy': (8, 8), 'value': 3, 'capacity': 3, 'neighbours': [{'node': (8, 6), 'position': 19}], 'is_completed': False, 'position': 20}
Bridge from (6, 6) = 8 to (6, 9) = 4 built
Affected nodes:
	{'xy': (6, 6), 'value': 8, 'capacity': 7, 'neighbours': [{'node': (6, 9), 'position': 16}, {'node': (3, 6), 'position': 8}, {'node': (8, 6), 'position': 19}], 'is_completed': False, 'position': 15}
	{'xy': (6, 9), 'value': 4, 'capacity': 1, 'neighbours': [{'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 16}
Bridge:
	{'ends': [(6, 6), (6, 9)], 'val': -1, 'is_hor': True}
============

Trying to build bridge from (6, 6) = 8 to (3, 6) = 9
Updating neighbours on the side of ends: [(3, 6), (6, 6)]
4 6
(4, 6)
[]
(5, 6)
[(5, 8)]
Bridge from (6, 6) = 8 to (3, 6) = 9 built
Affected nodes:
	{'xy': (6, 6), 'value': 8, 'capacity': 6, 'neighbours': [{'node': (6, 9), 'position': 16}, {'node': (3, 6), 'position': 8}, {'node': (8, 6), 'position': 19}], 'is_completed': False, 'position': 15}
	{'xy': (3, 6), 'value': 9, 'capacity': 5, 'neighbours': [{'node': (3, 4), 'position': 7}, {'node': (3, 8), 'position': 9}, {'node': (1, 6), 'position': 5}, {'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 8}
Bridge:
	{'ends': [(3, 6), (6, 6)], 'val': -1, 'is_hor': False}
============

Trying to build bridge from (6, 6) = 8 to (8, 6) = 9
Updating neighbours on the side of ends: [(6, 6), (8, 6)]
7 6
(7, 6)
[]
Bridge from (6, 6) = 8 to (8, 6) = 9 built
Affected nodes:
	{'xy': (6, 6), 'value': 8, 'capacity': 5, 'neighbours': [{'node': (6, 9), 'position': 16}, {'node': (3, 6), 'position': 8}, {'node': (8, 6), 'position': 19}], 'is_completed': False, 'position': 15}
	{'xy': (8, 6), 'value': 9, 'capacity': 8, 'neighbours': [{'node': (8, 4), 'position': 18}, {'node': (8, 8), 'position': 20}, {'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 19}
Bridge:
	{'ends': [(6, 6), (8, 6)], 'val': -1, 'is_hor': False}
============

3....5EE6.
..5-7-4.|.
..".|.|.|2
..".7-9-7"
5-8.|.|.|"
..".|.|.2"
5-8.|.8--4
..|.|.|...
..5.7.9.3.
3..3.1....

Checking for
	{'xy': (6, 9), 'value': 4, 'capacity': 1, 'neighbours': [{'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 16}
Node: (6, 9) satisfies lemma. Building bridges.
Trying to build bridge from (6, 9) = 4 to (6, 6) = 8
Updating neighbours on the side of ends: [(6, 6), (6, 9)]
(6, 7)
[]
(6, 8)
[(5, 8), (8, 8)]
Bridge from (6, 9) = 4 to (6, 6) = 8 built
Affected nodes:
	{'xy': (6, 9), 'value': 4, 'capacity': 0, 'neighbours': [{'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 16}
	{'xy': (6, 6), 'value': 8, 'capacity': 4, 'neighbours': [{'node': (6, 9), 'position': 16}, {'node': (3, 6), 'position': 8}, {'node': (8, 6), 'position': 19}], 'is_completed': False, 'position': 15}
Bridge:
	{'ends': [(6, 6), (6, 9)], 'val': -2, 'is_hor': True}
============

Removing
	{'xy': (6, 9), 'value': 4, 'capacity': 0, 'neighbours': [{'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 16}
	from:
[{'node': (6, 9), 'position': 16}, {'node': (3, 6), 'position': 8}, {'node': (8, 6), 'position': 19}]
Removed
	{'xy': (6, 9), 'value': 4, 'capacity': 0, 'neighbours': [{'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 16}
from
	{'xy': (6, 6), 'value': 8, 'capacity': 4, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (8, 6), 'position': 19}], 'is_completed': False, 'position': 15}
3....5EE6.
..5-7-4.|.
..".|.|.|2
..".7-9-7"
5-8.|.|.|"
..".|.|.2"
5-8.|.8==4
..|.|.|...
..5.7.9.3.
3..3.1....

Checking for
	{'xy': (8, 2), 'value': 5, 'capacity': 4, 'neighbours': [{'node': (8, 4), 'position': 18}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 17}
Node: (8, 2) satisfies lemma. Building bridges.
Trying to build bridge from (8, 2) = 5 to (8, 4) = 7
Updating neighbours on the side of ends: [(8, 2), (8, 4)]
(8, 3)
[(9, 3)]
Bridge from (8, 2) = 5 to (8, 4) = 7 built
Affected nodes:
	{'xy': (8, 2), 'value': 5, 'capacity': 3, 'neighbours': [{'node': (8, 4), 'position': 18}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 17}
	{'xy': (8, 4), 'value': 7, 'capacity': 5, 'neighbours': [{'node': (8, 2), 'position': 17}, {'node': (8, 6), 'position': 19}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 18}
Bridge:
	{'ends': [(8, 2), (8, 4)], 'val': -1, 'is_hor': True}
============

Trying to build bridge from (8, 2) = 5 to (6, 2) = 8
Updating neighbours on the side of ends: [(6, 2), (8, 2)]
7 2
(7, 2)
[]
Bridge from (8, 2) = 5 to (6, 2) = 8 built
Affected nodes:
	{'xy': (8, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (8, 4), 'position': 18}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 17}
	{'xy': (6, 2), 'value': 8, 'capacity': 3, 'neighbours': [{'node': (6, 0), 'position': 13}, {'node': (4, 2), 'position': 11}, {'node': (8, 2), 'position': 17}], 'is_completed': False, 'position': 14}
Bridge:
	{'ends': [(6, 2), (8, 2)], 'val': -2, 'is_hor': False}
============

3....5EE6.
..5-7-4.|.
..".|.|.|2
..".7-9-7"
5-8.|.|.|"
..".|.|.2"
5-8.|.8==4
..".|.|...
..5-7.9.3.
3..3.1....

Checking for
	{'xy': (8, 4), 'value': 7, 'capacity': 5, 'neighbours': [{'node': (8, 2), 'position': 17}, {'node': (8, 6), 'position': 19}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 18}
Lemma unsatisfied

Checking for
	{'xy': (8, 6), 'value': 9, 'capacity': 8, 'neighbours': [{'node': (8, 4), 'position': 18}, {'node': (8, 8), 'position': 20}, {'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 19}
Node: (8, 6) satisfies lemma. Building bridges.
	Current neighbour:{'node': (8, 4), 'position': 18}
	Full list: [{'node': (8, 4), 'position': 18}, {'node': (8, 8), 'position': 20}, {'node': (6, 6), 'position': 15}]
Trying to build bridge from (8, 6) = 9 to (8, 4) = 7
Updating neighbours on the side of ends: [(8, 4), (8, 6)]
(8, 5)
[(9, 5)]
Bridge from (8, 6) = 9 to (8, 4) = 7 built
Affected nodes:
	{'xy': (8, 6), 'value': 9, 'capacity': 5, 'neighbours': [{'node': (8, 4), 'position': 18}, {'node': (8, 8), 'position': 20}, {'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 19}
	{'xy': (8, 4), 'value': 7, 'capacity': 2, 'neighbours': [{'node': (8, 2), 'position': 17}, {'node': (8, 6), 'position': 19}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 18}
Bridge:
	{'ends': [(8, 4), (8, 6)], 'val': -3, 'is_hor': True}
============

	Current neighbour:{'node': (6, 6), 'position': 15}
	Full list: [{'node': (8, 8), 'position': 20}, {'node': (6, 6), 'position': 15}]
OVERWRITING EXISTING BRIDGE:
	{'ends': [(6, 6), (8, 6)], 'val': -1, 'is_hor': False}

Trying to build bridge from (8, 6) = 9 to (6, 6) = 8
Updating neighbours on the side of ends: [(6, 6), (8, 6)]
7 6
(7, 6)
[]
Bridge from (8, 6) = 9 to (6, 6) = 8 built
Affected nodes:
	{'xy': (8, 6), 'value': 9, 'capacity': 3, 'neighbours': [{'node': (8, 8), 'position': 20}, {'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 19}
	{'xy': (6, 6), 'value': 8, 'capacity': 2, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (8, 6), 'position': 19}], 'is_completed': False, 'position': 15}
Bridge:
	{'ends': [(6, 6), (8, 6)], 'val': -3, 'is_hor': False}
============

3....5EE6.
..5-7-4.|.
..".|.|.|2
..".7-9-7"
5-8.|.|.|"
..".|.|.2"
5-8.|.8==4
..".|.#...
..5-7E9.3.
3..3.1....

Checking for
	{'xy': (8, 8), 'value': 3, 'capacity': 3, 'neighbours': [{'node': (8, 6), 'position': 19}], 'is_completed': False, 'position': 20}
Node: (8, 8) satisfies lemma. Building bridges.
Trying to build bridge from (8, 8) = 3 to (8, 6) = 9
Updating neighbours on the side of ends: [(8, 6), (8, 8)]
(8, 7)
[]
Bridge from (8, 8) = 3 to (8, 6) = 9 built
Affected nodes:
	{'xy': (8, 8), 'value': 3, 'capacity': 0, 'neighbours': [{'node': (8, 6), 'position': 19}], 'is_completed': False, 'position': 20}
	{'xy': (8, 6), 'value': 9, 'capacity': 0, 'neighbours': [{'node': (8, 8), 'position': 20}], 'is_completed': False, 'position': 19}
Bridge:
	{'ends': [(8, 6), (8, 8)], 'val': -3, 'is_hor': True}
============

Removing
	{'xy': (8, 8), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': False, 'position': 20}
	from:
Removing
	{'xy': (8, 6), 'value': 9, 'capacity': 0, 'neighbours': [], 'is_completed': False, 'position': 19}
	from:
3....5EE6.
..5-7-4.|.
..".|.|.|2
..".7-9-7"
5-8.|.|.|"
..".|.|.2"
5-8.|.8==4
..".|.#...
..5-7E9E3.
3..3.1....

Checking for
	{'xy': (9, 0), 'value': 3, 'capacity': 3, 'neighbours': [{'node': (9, 3), 'position': 22}, {'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 21}
Lemma unsatisfied

Checking for
	{'xy': (9, 3), 'value': 3, 'capacity': 3, 'neighbours': [{'node': (9, 0), 'position': 21}, {'node': (9, 5), 'position': 23}], 'is_completed': False, 'position': 22}
Lemma unsatisfied

Checking for
	{'xy': (9, 5), 'value': 1, 'capacity': 1, 'neighbours': [{'node': (9, 3), 'position': 22}], 'is_completed': False, 'position': 23}
Node: (9, 5) satisfies lemma. Building bridges.
Trying to build bridge from (9, 5) = 1 to (9, 3) = 3
Updating neighbours on the side of ends: [(9, 3), (9, 5)]
(9, 4)
[(8, 4)]
Bridge from (9, 5) = 1 to (9, 3) = 3 built
Affected nodes:
	{'xy': (9, 5), 'value': 1, 'capacity': 0, 'neighbours': [{'node': (9, 3), 'position': 22}], 'is_completed': False, 'position': 23}
	{'xy': (9, 3), 'value': 3, 'capacity': 2, 'neighbours': [{'node': (9, 0), 'position': 21}, {'node': (9, 5), 'position': 23}], 'is_completed': False, 'position': 22}
Bridge:
	{'ends': [(9, 3), (9, 5)], 'val': -1, 'is_hor': True}
============

Removing
	{'xy': (9, 5), 'value': 1, 'capacity': 0, 'neighbours': [{'node': (9, 3), 'position': 22}], 'is_completed': False, 'position': 23}
	from:
[{'node': (9, 0), 'position': 21}, {'node': (9, 5), 'position': 23}]
Removed
	{'xy': (9, 5), 'value': 1, 'capacity': 0, 'neighbours': [{'node': (9, 3), 'position': 22}], 'is_completed': False, 'position': 23}
from
	{'xy': (9, 3), 'value': 3, 'capacity': 2, 'neighbours': [{'node': (9, 0), 'position': 21}], 'is_completed': False, 'position': 22}
3....5EE6.
..5-7-4.|.
..".|.|.|2
..".7-9-7"
5-8.|.|.|"
..".|.|.2"
5-8.|.8==4
..".|.#...
..5-7E9E3.
3..3-1....



Iterating


Checking for
	{'xy': (0, 0), 'value': 3, 'capacity': 3, 'neighbours': [{'node': (0, 5), 'position': 1}, {'node': (4, 0), 'position': 10}], 'is_completed': False, 'position': 0}
Lemma unsatisfied

Checking for
	{'xy': (0, 5), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (0, 0), 'position': 0}], 'is_completed': False, 'position': 1}
Node: (0, 5) satisfies lemma. Building bridges.
Trying to build bridge from (0, 5) = 5 to (0, 0) = 3
Updating neighbours on the side of ends: [(0, 0), (0, 5)]
(0, 1)
[]
(0, 2)
[(1, 2)]
(0, 3)
[]
(0, 4)
[(1, 4)]
Bridge from (0, 5) = 5 to (0, 0) = 3 built
Affected nodes:
	{'xy': (0, 5), 'value': 5, 'capacity': 0, 'neighbours': [{'node': (0, 0), 'position': 0}], 'is_completed': False, 'position': 1}
	{'xy': (0, 0), 'value': 3, 'capacity': 1, 'neighbours': [{'node': (0, 5), 'position': 1}, {'node': (4, 0), 'position': 10}], 'is_completed': False, 'position': 0}
Bridge:
	{'ends': [(0, 0), (0, 5)], 'val': -2, 'is_hor': True}
============

Removing
	{'xy': (0, 5), 'value': 5, 'capacity': 0, 'neighbours': [{'node': (0, 0), 'position': 0}], 'is_completed': False, 'position': 1}
	from:
[{'node': (0, 5), 'position': 1}, {'node': (4, 0), 'position': 10}]
Removed
	{'xy': (0, 5), 'value': 5, 'capacity': 0, 'neighbours': [{'node': (0, 0), 'position': 0}], 'is_completed': False, 'position': 1}
from
	{'xy': (0, 0), 'value': 3, 'capacity': 1, 'neighbours': [{'node': (4, 0), 'position': 10}], 'is_completed': False, 'position': 0}
3====5EE6.
..5-7-4.|.
..".|.|.|2
..".7-9-7"
5-8.|.|.|"
..".|.|.2"
5-8.|.8==4
..".|.#...
..5-7E9E3.
3..3-1....

Checking for
	{'xy': (0, 8), 'value': 6, 'capacity': 2, 'neighbours': [{'node': (3, 8), 'position': 9}], 'is_completed': False, 'position': 2}
Node: (0, 8) satisfies lemma. Building bridges.
Trying to build bridge from (0, 8) = 6 to (3, 8) = 7
Updating neighbours on the side of ends: [(0, 8), (3, 8)]
1 8
(1, 8)
[(1, 6)]
(2, 8)
[(2, 9)]
Bridge from (0, 8) = 6 to (3, 8) = 7 built
Affected nodes:
	{'xy': (0, 8), 'value': 6, 'capacity': 0, 'neighbours': [{'node': (3, 8), 'position': 9}], 'is_completed': False, 'position': 2}
	{'xy': (3, 8), 'value': 7, 'capacity': 2, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (0, 8), 'position': 2}, {'node': (5, 8), 'position': 12}], 'is_completed': False, 'position': 9}
Bridge:
	{'ends': [(0, 8), (3, 8)], 'val': -3, 'is_hor': False}
============

Removing
	{'xy': (0, 8), 'value': 6, 'capacity': 0, 'neighbours': [], 'is_completed': False, 'position': 2}
	from:
3====5EE6.
..5-7-4.#.
..".|.|.#2
..".7-9-7"
5-8.|.|.|"
..".|.|.2"
5-8.|.8==4
..".|.#...
..5-7E9E3.
3..3-1....

Checking for
	{'xy': (1, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (4, 2), 'position': 11}], 'is_completed': False, 'position': 3}
Lemma unsatisfied

Checking for
	{'xy': (1, 4), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (1, 2), 'position': 3}, {'node': (1, 6), 'position': 5}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 4}
Lemma unsatisfied

Checking for
	{'xy': (1, 6), 'value': 4, 'capacity': 2, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (3, 6), 'position': 8}], 'is_completed': False, 'position': 5}
Lemma unsatisfied

Checking for
	{'xy': (2, 9), 'value': 2, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 6}
Lemma unsatisfied

Checking for
	{'xy': (3, 4), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (1, 4), 'position': 4}, {'node': (8, 4), 'position': 18}], 'is_completed': False, 'position': 7}
Lemma unsatisfied

Checking for
	{'xy': (3, 6), 'value': 9, 'capacity': 5, 'neighbours': [{'node': (3, 4), 'position': 7}, {'node': (3, 8), 'position': 9}, {'node': (1, 6), 'position': 5}, {'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 8}
Lemma unsatisfied

Checking for
	{'xy': (3, 8), 'value': 7, 'capacity': 2, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (5, 8), 'position': 12}], 'is_completed': False, 'position': 9}
Lemma unsatisfied

Checking for
	{'xy': (4, 0), 'value': 5, 'capacity': 4, 'neighbours': [{'node': (4, 2), 'position': 11}, {'node': (0, 0), 'position': 0}, {'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 10}
Lemma unsatisfied

Checking for
	{'xy': (4, 2), 'value': 8, 'capacity': 3, 'neighbours': [{'node': (4, 0), 'position': 10}, {'node': (1, 2), 'position': 3}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 11}
Lemma unsatisfied

Checking for
	{'xy': (5, 8), 'value': 2, 'capacity': 1, 'neighbours': [{'node': (3, 8), 'position': 9}], 'is_completed': False, 'position': 12}
Node: (5, 8) satisfies lemma. Building bridges.
Trying to build bridge from (5, 8) = 2 to (3, 8) = 7
Updating neighbours on the side of ends: [(3, 8), (5, 8)]
4 8
(4, 8)
[]
Bridge from (5, 8) = 2 to (3, 8) = 7 built
Affected nodes:
	{'xy': (5, 8), 'value': 2, 'capacity': 0, 'neighbours': [{'node': (3, 8), 'position': 9}], 'is_completed': False, 'position': 12}
	{'xy': (3, 8), 'value': 7, 'capacity': 1, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (5, 8), 'position': 12}], 'is_completed': False, 'position': 9}
Bridge:
	{'ends': [(3, 8), (5, 8)], 'val': -2, 'is_hor': False}
============

Removing
	{'xy': (5, 8), 'value': 2, 'capacity': 0, 'neighbours': [{'node': (3, 8), 'position': 9}], 'is_completed': False, 'position': 12}
	from:
[{'node': (3, 6), 'position': 8}, {'node': (5, 8), 'position': 12}]
Removed
	{'xy': (5, 8), 'value': 2, 'capacity': 0, 'neighbours': [{'node': (3, 8), 'position': 9}], 'is_completed': False, 'position': 12}
from
	{'xy': (3, 8), 'value': 7, 'capacity': 1, 'neighbours': [{'node': (3, 6), 'position': 8}], 'is_completed': False, 'position': 9}
3====5EE6.
..5-7-4.#.
..".|.|.#2
..".7-9-7"
5-8.|.|.""
..".|.|.2"
5-8.|.8==4
..".|.#...
..5-7E9E3.
3..3-1....

Checking for
	{'xy': (6, 0), 'value': 5, 'capacity': 4, 'neighbours': [{'node': (6, 2), 'position': 14}, {'node': (4, 0), 'position': 10}, {'node': (9, 0), 'position': 21}], 'is_completed': False, 'position': 13}
Lemma unsatisfied

Checking for
	{'xy': (6, 2), 'value': 8, 'capacity': 3, 'neighbours': [{'node': (6, 0), 'position': 13}, {'node': (4, 2), 'position': 11}, {'node': (8, 2), 'position': 17}], 'is_completed': False, 'position': 14}
Lemma unsatisfied

Checking for
	{'xy': (6, 6), 'value': 8, 'capacity': 2, 'neighbours': [{'node': (3, 6), 'position': 8}], 'is_completed': False, 'position': 15}
Node: (6, 6) satisfies lemma. Building bridges.
Trying to build bridge from (6, 6) = 8 to (3, 6) = 9
Updating neighbours on the side of ends: [(3, 6), (6, 6)]
4 6
(4, 6)
[]
(5, 6)
[(5, 8)]
Bridge from (6, 6) = 8 to (3, 6) = 9 built
Affected nodes:
	{'xy': (6, 6), 'value': 8, 'capacity': 0, 'neighbours': [{'node': (3, 6), 'position': 8}], 'is_completed': False, 'position': 15}
	{'xy': (3, 6), 'value': 9, 'capacity': 3, 'neighbours': [{'node': (3, 4), 'position': 7}, {'node': (3, 8), 'position': 9}, {'node': (1, 6), 'position': 5}, {'node': (6, 6), 'position': 15}], 'is_completed': False, 'position': 8}
Bridge:
	{'ends': [(3, 6), (6, 6)], 'val': -3, 'is_hor': False}
============

Removing
	{'xy': (6, 6), 'value': 8, 'capacity': 0, 'neighbours': [], 'is_completed': False, 'position': 15}
	from:
3====5EE6.
..5-7-4.#.
..".|.|.#2
..".7-9-7"
5-8.|.#.""
..".|.#.2"
5-8.|.8==4
..".|.#...
..5-7E9E3.
3..3-1....

Checking for
	{'xy': (6, 9), 'value': 4, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 16}
Lemma unsatisfied

Checking for
	{'xy': (8, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (8, 4), 'position': 18}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 17}
Lemma unsatisfied

Checking for
	{'xy': (8, 4), 'value': 7, 'capacity': 2, 'neighbours': [{'node': (8, 2), 'position': 17}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 18}
Lemma unsatisfied

Checking for
	{'xy': (8, 6), 'value': 9, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 19}
Lemma unsatisfied

Checking for
	{'xy': (8, 8), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 20}
Lemma unsatisfied

Checking for
	{'xy': (9, 0), 'value': 3, 'capacity': 3, 'neighbours': [{'node': (9, 3), 'position': 22}, {'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 21}
Lemma unsatisfied

Checking for
	{'xy': (9, 3), 'value': 3, 'capacity': 2, 'neighbours': [{'node': (9, 0), 'position': 21}], 'is_completed': False, 'position': 22}
Node: (9, 3) satisfies lemma. Building bridges.
Trying to build bridge from (9, 3) = 3 to (9, 0) = 3
Updating neighbours on the side of ends: [(9, 0), (9, 3)]
(9, 1)
[]
(9, 2)
[(8, 2)]
Bridge from (9, 3) = 3 to (9, 0) = 3 built
Affected nodes:
	{'xy': (9, 3), 'value': 3, 'capacity': 0, 'neighbours': [{'node': (9, 0), 'position': 21}], 'is_completed': False, 'position': 22}
	{'xy': (9, 0), 'value': 3, 'capacity': 1, 'neighbours': [{'node': (9, 3), 'position': 22}, {'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 21}
Bridge:
	{'ends': [(9, 0), (9, 3)], 'val': -2, 'is_hor': True}
============

Removing
	{'xy': (9, 3), 'value': 3, 'capacity': 0, 'neighbours': [{'node': (9, 0), 'position': 21}], 'is_completed': False, 'position': 22}
	from:
[{'node': (9, 3), 'position': 22}, {'node': (6, 0), 'position': 13}]
Removed
	{'xy': (9, 3), 'value': 3, 'capacity': 0, 'neighbours': [{'node': (9, 0), 'position': 21}], 'is_completed': False, 'position': 22}
from
	{'xy': (9, 0), 'value': 3, 'capacity': 1, 'neighbours': [{'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 21}
3====5EE6.
..5-7-4.#.
..".|.|.#2
..".7-9-7"
5-8.|.#.""
..".|.#.2"
5-8.|.8==4
..".|.#...
..5-7E9E3.
3==3-1....

Checking for
	{'xy': (9, 5), 'value': 1, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 23}
Lemma unsatisfied



Iterating


Checking for
	{'xy': (0, 0), 'value': 3, 'capacity': 1, 'neighbours': [{'node': (4, 0), 'position': 10}], 'is_completed': False, 'position': 0}
Node: (0, 0) satisfies lemma. Building bridges.
Trying to build bridge from (0, 0) = 3 to (4, 0) = 5
Updating neighbours on the side of ends: [(0, 0), (4, 0)]
1 0
(1, 0)
[(1, 2)]
(2, 0)
[]
(3, 0)
[]
Bridge from (0, 0) = 3 to (4, 0) = 5 built
Affected nodes:
	{'xy': (0, 0), 'value': 3, 'capacity': 0, 'neighbours': [{'node': (4, 0), 'position': 10}], 'is_completed': False, 'position': 0}
	{'xy': (4, 0), 'value': 5, 'capacity': 3, 'neighbours': [{'node': (4, 2), 'position': 11}, {'node': (0, 0), 'position': 0}, {'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 10}
Bridge:
	{'ends': [(0, 0), (4, 0)], 'val': -1, 'is_hor': False}
============

Removing
	{'xy': (0, 0), 'value': 3, 'capacity': 0, 'neighbours': [{'node': (4, 0), 'position': 10}], 'is_completed': False, 'position': 0}
	from:
[{'node': (4, 2), 'position': 11}, {'node': (0, 0), 'position': 0}, {'node': (6, 0), 'position': 13}]
Removed
	{'xy': (0, 0), 'value': 3, 'capacity': 0, 'neighbours': [{'node': (4, 0), 'position': 10}], 'is_completed': False, 'position': 0}
from
	{'xy': (4, 0), 'value': 5, 'capacity': 3, 'neighbours': [{'node': (4, 2), 'position': 11}, {'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 10}
3====5EE6.
|.5-7-4.#.
|.".|.|.#2
|.".7-9-7"
5-8.|.#.""
..".|.#.2"
5-8.|.8==4
..".|.#...
..5-7E9E3.
3==3-1....

Checking for
	{'xy': (0, 5), 'value': 5, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 1}
Lemma unsatisfied

Checking for
	{'xy': (0, 8), 'value': 6, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 2}
Lemma unsatisfied

Checking for
	{'xy': (1, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (4, 2), 'position': 11}], 'is_completed': False, 'position': 3}
Lemma unsatisfied

Checking for
	{'xy': (1, 4), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (1, 2), 'position': 3}, {'node': (1, 6), 'position': 5}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 4}
Lemma unsatisfied

Checking for
	{'xy': (1, 6), 'value': 4, 'capacity': 2, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (3, 6), 'position': 8}], 'is_completed': False, 'position': 5}
Lemma unsatisfied

Checking for
	{'xy': (2, 9), 'value': 2, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 6}
Lemma unsatisfied

Checking for
	{'xy': (3, 4), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (1, 4), 'position': 4}, {'node': (8, 4), 'position': 18}], 'is_completed': False, 'position': 7}
Lemma unsatisfied

Checking for
	{'xy': (3, 6), 'value': 9, 'capacity': 3, 'neighbours': [{'node': (3, 4), 'position': 7}, {'node': (3, 8), 'position': 9}, {'node': (1, 6), 'position': 5}], 'is_completed': False, 'position': 8}
Lemma unsatisfied

Checking for
	{'xy': (3, 8), 'value': 7, 'capacity': 1, 'neighbours': [{'node': (3, 6), 'position': 8}], 'is_completed': False, 'position': 9}
Node: (3, 8) satisfies lemma. Building bridges.
Trying to build bridge from (3, 8) = 7 to (3, 6) = 9
Updating neighbours on the side of ends: [(3, 6), (3, 8)]
(3, 7)
[]
Bridge from (3, 8) = 7 to (3, 6) = 9 built
Affected nodes:
	{'xy': (3, 8), 'value': 7, 'capacity': 0, 'neighbours': [{'node': (3, 6), 'position': 8}], 'is_completed': False, 'position': 9}
	{'xy': (3, 6), 'value': 9, 'capacity': 2, 'neighbours': [{'node': (3, 4), 'position': 7}, {'node': (3, 8), 'position': 9}, {'node': (1, 6), 'position': 5}], 'is_completed': False, 'position': 8}
Bridge:
	{'ends': [(3, 6), (3, 8)], 'val': -2, 'is_hor': True}
============

Removing
	{'xy': (3, 8), 'value': 7, 'capacity': 0, 'neighbours': [{'node': (3, 6), 'position': 8}], 'is_completed': False, 'position': 9}
	from:
[{'node': (3, 4), 'position': 7}, {'node': (3, 8), 'position': 9}, {'node': (1, 6), 'position': 5}]
Removed
	{'xy': (3, 8), 'value': 7, 'capacity': 0, 'neighbours': [{'node': (3, 6), 'position': 8}], 'is_completed': False, 'position': 9}
from
	{'xy': (3, 6), 'value': 9, 'capacity': 2, 'neighbours': [{'node': (3, 4), 'position': 7}, {'node': (1, 6), 'position': 5}], 'is_completed': False, 'position': 8}
3====5EE6.
|.5-7-4.#.
|.".|.|.#2
|.".7-9=7"
5-8.|.#.""
..".|.#.2"
5-8.|.8==4
..".|.#...
..5-7E9E3.
3==3-1....

Checking for
	{'xy': (4, 0), 'value': 5, 'capacity': 3, 'neighbours': [{'node': (4, 2), 'position': 11}, {'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 10}
Lemma unsatisfied

Checking for
	{'xy': (4, 2), 'value': 8, 'capacity': 3, 'neighbours': [{'node': (4, 0), 'position': 10}, {'node': (1, 2), 'position': 3}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 11}
Lemma unsatisfied

Checking for
	{'xy': (5, 8), 'value': 2, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 12}
Lemma unsatisfied

Checking for
	{'xy': (6, 0), 'value': 5, 'capacity': 4, 'neighbours': [{'node': (6, 2), 'position': 14}, {'node': (4, 0), 'position': 10}, {'node': (9, 0), 'position': 21}], 'is_completed': False, 'position': 13}
Lemma unsatisfied

Checking for
	{'xy': (6, 2), 'value': 8, 'capacity': 3, 'neighbours': [{'node': (6, 0), 'position': 13}, {'node': (4, 2), 'position': 11}, {'node': (8, 2), 'position': 17}], 'is_completed': False, 'position': 14}
Lemma unsatisfied

Checking for
	{'xy': (6, 6), 'value': 8, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 15}
Lemma unsatisfied

Checking for
	{'xy': (6, 9), 'value': 4, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 16}
Lemma unsatisfied

Checking for
	{'xy': (8, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (8, 4), 'position': 18}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 17}
Lemma unsatisfied

Checking for
	{'xy': (8, 4), 'value': 7, 'capacity': 2, 'neighbours': [{'node': (8, 2), 'position': 17}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 18}
Lemma unsatisfied

Checking for
	{'xy': (8, 6), 'value': 9, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 19}
Lemma unsatisfied

Checking for
	{'xy': (8, 8), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 20}
Lemma unsatisfied

Checking for
	{'xy': (9, 0), 'value': 3, 'capacity': 1, 'neighbours': [{'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 21}
Node: (9, 0) satisfies lemma. Building bridges.
Trying to build bridge from (9, 0) = 3 to (6, 0) = 5
Updating neighbours on the side of ends: [(6, 0), (9, 0)]
7 0
(7, 0)
[]
(8, 0)
[(8, 2)]
Bridge from (9, 0) = 3 to (6, 0) = 5 built
Affected nodes:
	{'xy': (9, 0), 'value': 3, 'capacity': 0, 'neighbours': [{'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 21}
	{'xy': (6, 0), 'value': 5, 'capacity': 3, 'neighbours': [{'node': (6, 2), 'position': 14}, {'node': (4, 0), 'position': 10}, {'node': (9, 0), 'position': 21}], 'is_completed': False, 'position': 13}
Bridge:
	{'ends': [(6, 0), (9, 0)], 'val': -1, 'is_hor': False}
============

Removing
	{'xy': (9, 0), 'value': 3, 'capacity': 0, 'neighbours': [{'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 21}
	from:
[{'node': (6, 2), 'position': 14}, {'node': (4, 0), 'position': 10}, {'node': (9, 0), 'position': 21}]
Removed
	{'xy': (9, 0), 'value': 3, 'capacity': 0, 'neighbours': [{'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 21}
from
	{'xy': (6, 0), 'value': 5, 'capacity': 3, 'neighbours': [{'node': (6, 2), 'position': 14}, {'node': (4, 0), 'position': 10}], 'is_completed': False, 'position': 13}
3====5EE6.
|.5-7-4.#.
|.".|.|.#2
|.".7-9=7"
5-8.|.#.""
..".|.#.2"
5-8.|.8==4
|.".|.#...
|.5-7E9E3.
3==3-1....

Checking for
	{'xy': (9, 3), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 22}
Lemma unsatisfied

Checking for
	{'xy': (9, 5), 'value': 1, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 23}
Lemma unsatisfied



Iterating


Checking for
	{'xy': (0, 0), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 0}
Lemma unsatisfied

Checking for
	{'xy': (0, 5), 'value': 5, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 1}
Lemma unsatisfied

Checking for
	{'xy': (0, 8), 'value': 6, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 2}
Lemma unsatisfied

Checking for
	{'xy': (1, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (4, 2), 'position': 11}], 'is_completed': False, 'position': 3}
Lemma unsatisfied

Checking for
	{'xy': (1, 4), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (1, 2), 'position': 3}, {'node': (1, 6), 'position': 5}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 4}
Lemma unsatisfied

Checking for
	{'xy': (1, 6), 'value': 4, 'capacity': 2, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (3, 6), 'position': 8}], 'is_completed': False, 'position': 5}
Lemma unsatisfied

Checking for
	{'xy': (2, 9), 'value': 2, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 6}
Lemma unsatisfied

Checking for
	{'xy': (3, 4), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (1, 4), 'position': 4}, {'node': (8, 4), 'position': 18}], 'is_completed': False, 'position': 7}
Lemma unsatisfied

Checking for
	{'xy': (3, 6), 'value': 9, 'capacity': 2, 'neighbours': [{'node': (3, 4), 'position': 7}, {'node': (1, 6), 'position': 5}], 'is_completed': False, 'position': 8}
Lemma unsatisfied

Checking for
	{'xy': (3, 8), 'value': 7, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 9}
Lemma unsatisfied

Checking for
	{'xy': (4, 0), 'value': 5, 'capacity': 3, 'neighbours': [{'node': (4, 2), 'position': 11}, {'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 10}
Lemma unsatisfied

Checking for
	{'xy': (4, 2), 'value': 8, 'capacity': 3, 'neighbours': [{'node': (4, 0), 'position': 10}, {'node': (1, 2), 'position': 3}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 11}
Lemma unsatisfied

Checking for
	{'xy': (5, 8), 'value': 2, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 12}
Lemma unsatisfied

Checking for
	{'xy': (6, 0), 'value': 5, 'capacity': 3, 'neighbours': [{'node': (6, 2), 'position': 14}, {'node': (4, 0), 'position': 10}], 'is_completed': False, 'position': 13}
Lemma unsatisfied

Checking for
	{'xy': (6, 2), 'value': 8, 'capacity': 3, 'neighbours': [{'node': (6, 0), 'position': 13}, {'node': (4, 2), 'position': 11}, {'node': (8, 2), 'position': 17}], 'is_completed': False, 'position': 14}
Lemma unsatisfied

Checking for
	{'xy': (6, 6), 'value': 8, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 15}
Lemma unsatisfied

Checking for
	{'xy': (6, 9), 'value': 4, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 16}
Lemma unsatisfied

Checking for
	{'xy': (8, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (8, 4), 'position': 18}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 17}
Lemma unsatisfied

Checking for
	{'xy': (8, 4), 'value': 7, 'capacity': 2, 'neighbours': [{'node': (8, 2), 'position': 17}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 18}
Lemma unsatisfied

Checking for
	{'xy': (8, 6), 'value': 9, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 19}
Lemma unsatisfied

Checking for
	{'xy': (8, 8), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 20}
Lemma unsatisfied

Checking for
	{'xy': (9, 0), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 21}
Lemma unsatisfied

Checking for
	{'xy': (9, 3), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 22}
Lemma unsatisfied

Checking for
	{'xy': (9, 5), 'value': 1, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 23}
Lemma unsatisfied

dfs nodes: [{'nodes': [{'xy': (0, 0), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 0}, {'xy': (0, 5), 'value': 5, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 1}, {'xy': (0, 8), 'value': 6, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 2}, {'xy': (1, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (4, 2), 'position': 11}], 'is_completed': False, 'position': 3}, {'xy': (1, 4), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (1, 2), 'position': 3}, {'node': (1, 6), 'position': 5}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 4}, {'xy': (1, 6), 'value': 4, 'capacity': 2, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (3, 6), 'position': 8}], 'is_completed': False, 'position': 5}, {'xy': (2, 9), 'value': 2, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 6}, {'xy': (3, 4), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (1, 4), 'position': 4}, {'node': (8, 4), 'position': 18}], 'is_completed': False, 'position': 7}, {'xy': (3, 6), 'value': 9, 'capacity': 2, 'neighbours': [{'node': (3, 4), 'position': 7}, {'node': (1, 6), 'position': 5}], 'is_completed': False, 'position': 8}, {'xy': (3, 8), 'value': 7, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 9}, {'xy': (4, 0), 'value': 5, 'capacity': 3, 'neighbours': [{'node': (4, 2), 'position': 11}, {'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 10}, {'xy': (4, 2), 'value': 8, 'capacity': 3, 'neighbours': [{'node': (4, 0), 'position': 10}, {'node': (1, 2), 'position': 3}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 11}, {'xy': (5, 8), 'value': 2, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 12}, {'xy': (6, 0), 'value': 5, 'capacity': 3, 'neighbours': [{'node': (6, 2), 'position': 14}, {'node': (4, 0), 'position': 10}], 'is_completed': False, 'position': 13}, {'xy': (6, 2), 'value': 8, 'capacity': 3, 'neighbours': [{'node': (6, 0), 'position': 13}, {'node': (4, 2), 'position': 11}, {'node': (8, 2), 'position': 17}], 'is_completed': False, 'position': 14}, {'xy': (6, 6), 'value': 8, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 15}, {'xy': (6, 9), 'value': 4, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 16}, {'xy': (8, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (8, 4), 'position': 18}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 17}, {'xy': (8, 4), 'value': 7, 'capacity': 2, 'neighbours': [{'node': (8, 2), 'position': 17}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 18}, {'xy': (8, 6), 'value': 9, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 19}, {'xy': (8, 8), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 20}, {'xy': (9, 0), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 21}, {'xy': (9, 3), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 22}, {'xy': (9, 5), 'value': 1, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 23}], 'iter': 0}]
dfs bridges: [{'bridges': [{'ends': [(0, 5), (0, 8)], 'val': -3, 'is_hor': True}, {'ends': [(1, 2), (1, 4)], 'val': -1, 'is_hor': True}, {'ends': [(1, 2), (4, 2)], 'val': -2, 'is_hor': False}, {'ends': [(1, 4), (1, 6)], 'val': -1, 'is_hor': True}, {'ends': [(1, 6), (3, 6)], 'val': -1, 'is_hor': False}, {'ends': [(2, 9), (6, 9)], 'val': -2, 'is_hor': False}, {'ends': [(3, 4), (3, 6)], 'val': -1, 'is_hor': True}, {'ends': [(1, 4), (3, 4)], 'val': -1, 'is_hor': False}, {'ends': [(3, 4), (8, 4)], 'val': -1, 'is_hor': False}, {'ends': [(3, 6), (3, 8)], 'val': -2, 'is_hor': True}, {'ends': [(0, 8), (3, 8)], 'val': -3, 'is_hor': False}, {'ends': [(3, 8), (5, 8)], 'val': -2, 'is_hor': False}, {'ends': [(4, 0), (4, 2)], 'val': -1, 'is_hor': True}, {'ends': [(4, 2), (6, 2)], 'val': -2, 'is_hor': False}, {'ends': [(6, 0), (6, 2)], 'val': -1, 'is_hor': True}, {'ends': [(6, 2), (8, 2)], 'val': -2, 'is_hor': False}, {'ends': [(6, 6), (6, 9)], 'val': -2, 'is_hor': True}, {'ends': [(3, 6), (6, 6)], 'val': -3, 'is_hor': False}, {'ends': [(6, 6), (8, 6)], 'val': -3, 'is_hor': False}, {'ends': [(8, 2), (8, 4)], 'val': -1, 'is_hor': True}, {'ends': [(8, 4), (8, 6)], 'val': -3, 'is_hor': True}, {'ends': [(8, 6), (8, 8)], 'val': -3, 'is_hor': True}, {'ends': [(9, 3), (9, 5)], 'val': -1, 'is_hor': True}, {'ends': [(0, 0), (0, 5)], 'val': -2, 'is_hor': True}, {'ends': [(9, 0), (9, 3)], 'val': -2, 'is_hor': True}, {'ends': [(0, 0), (4, 0)], 'val': -1, 'is_hor': False}, {'ends': [(6, 0), (9, 0)], 'val': -1, 'is_hor': False}], 'iter': 0}]
||||||i = 0; j = 0||||||
Node: {'xy': (0, 0), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 0}
Try no bridge=======================
||||||i = 1; j = 0||||||
Node: {'xy': (0, 5), 'value': 5, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 1}
Try no bridge=======================
||||||i = 2; j = 0||||||
Node: {'xy': (0, 8), 'value': 6, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 2}
Try no bridge=======================
||||||i = 3; j = 0||||||
Node: {'xy': (1, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (4, 2), 'position': 11}], 'is_completed': False, 'position': 3}
Try no bridge=======================
||||||i = 3; j = 1||||||
Node: {'xy': (1, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (4, 2), 'position': 11}], 'is_completed': False, 'position': 3}
Try no bridge=======================
||||||i = 3; j = 2||||||
Node: {'xy': (1, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (4, 2), 'position': 11}], 'is_completed': False, 'position': 3}
Try no bridge=======================
||||||i = 4; j = 0||||||
Node: {'xy': (1, 4), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (1, 2), 'position': 3}, {'node': (1, 6), 'position': 5}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 4}
Try no bridge=======================
||||||i = 4; j = 1||||||
Node: {'xy': (1, 4), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (1, 2), 'position': 3}, {'node': (1, 6), 'position': 5}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 4}
Try no bridge=======================
||||||i = 4; j = 2||||||
Node: {'xy': (1, 4), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (1, 2), 'position': 3}, {'node': (1, 6), 'position': 5}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 4}
Try no bridge=======================
||||||i = 4; j = 3||||||
Node: {'xy': (1, 4), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (1, 2), 'position': 3}, {'node': (1, 6), 'position': 5}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 4}
Try no bridge=======================
||||||i = 5; j = 0||||||
Node: {'xy': (1, 6), 'value': 4, 'capacity': 2, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (3, 6), 'position': 8}], 'is_completed': False, 'position': 5}
Try no bridge=======================
||||||i = 5; j = 1||||||
Node: {'xy': (1, 6), 'value': 4, 'capacity': 2, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (3, 6), 'position': 8}], 'is_completed': False, 'position': 5}
Try no bridge=======================
||||||i = 5; j = 2||||||
Node: {'xy': (1, 6), 'value': 4, 'capacity': 2, 'neighbours': [{'node': (1, 4), 'position': 4}, {'node': (3, 6), 'position': 8}], 'is_completed': False, 'position': 5}
Try no bridge=======================
||||||i = 6; j = 0||||||
Node: {'xy': (2, 9), 'value': 2, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 6}
Try no bridge=======================
||||||i = 7; j = 0||||||
Node: {'xy': (3, 4), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (1, 4), 'position': 4}, {'node': (8, 4), 'position': 18}], 'is_completed': False, 'position': 7}
Try no bridge=======================
||||||i = 7; j = 1||||||
Node: {'xy': (3, 4), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (1, 4), 'position': 4}, {'node': (8, 4), 'position': 18}], 'is_completed': False, 'position': 7}
Try no bridge=======================
||||||i = 7; j = 2||||||
Node: {'xy': (3, 4), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (1, 4), 'position': 4}, {'node': (8, 4), 'position': 18}], 'is_completed': False, 'position': 7}
Try no bridge=======================
||||||i = 7; j = 3||||||
Node: {'xy': (3, 4), 'value': 7, 'capacity': 4, 'neighbours': [{'node': (3, 6), 'position': 8}, {'node': (1, 4), 'position': 4}, {'node': (8, 4), 'position': 18}], 'is_completed': False, 'position': 7}
Try no bridge=======================
||||||i = 8; j = 0||||||
Node: {'xy': (3, 6), 'value': 9, 'capacity': 2, 'neighbours': [{'node': (3, 4), 'position': 7}, {'node': (1, 6), 'position': 5}], 'is_completed': False, 'position': 8}
Try no bridge=======================
||||||i = 8; j = 1||||||
Node: {'xy': (3, 6), 'value': 9, 'capacity': 2, 'neighbours': [{'node': (3, 4), 'position': 7}, {'node': (1, 6), 'position': 5}], 'is_completed': False, 'position': 8}
Try no bridge=======================
||||||i = 8; j = 2||||||
Node: {'xy': (3, 6), 'value': 9, 'capacity': 2, 'neighbours': [{'node': (3, 4), 'position': 7}, {'node': (1, 6), 'position': 5}], 'is_completed': False, 'position': 8}
Try no bridge=======================
||||||i = 9; j = 0||||||
Node: {'xy': (3, 8), 'value': 7, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 9}
Try no bridge=======================
||||||i = 10; j = 0||||||
Node: {'xy': (4, 0), 'value': 5, 'capacity': 3, 'neighbours': [{'node': (4, 2), 'position': 11}, {'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 10}
Try no bridge=======================
||||||i = 10; j = 1||||||
Node: {'xy': (4, 0), 'value': 5, 'capacity': 3, 'neighbours': [{'node': (4, 2), 'position': 11}, {'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 10}
Try no bridge=======================
||||||i = 10; j = 2||||||
Node: {'xy': (4, 0), 'value': 5, 'capacity': 3, 'neighbours': [{'node': (4, 2), 'position': 11}, {'node': (6, 0), 'position': 13}], 'is_completed': False, 'position': 10}
Try no bridge=======================
||||||i = 11; j = 0||||||
Node: {'xy': (4, 2), 'value': 8, 'capacity': 3, 'neighbours': [{'node': (4, 0), 'position': 10}, {'node': (1, 2), 'position': 3}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 11}
Try no bridge=======================
||||||i = 11; j = 1||||||
Node: {'xy': (4, 2), 'value': 8, 'capacity': 3, 'neighbours': [{'node': (4, 0), 'position': 10}, {'node': (1, 2), 'position': 3}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 11}
Try no bridge=======================
||||||i = 11; j = 2||||||
Node: {'xy': (4, 2), 'value': 8, 'capacity': 3, 'neighbours': [{'node': (4, 0), 'position': 10}, {'node': (1, 2), 'position': 3}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 11}
Try no bridge=======================
||||||i = 11; j = 3||||||
Node: {'xy': (4, 2), 'value': 8, 'capacity': 3, 'neighbours': [{'node': (4, 0), 'position': 10}, {'node': (1, 2), 'position': 3}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 11}
Try no bridge=======================
||||||i = 12; j = 0||||||
Node: {'xy': (5, 8), 'value': 2, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 12}
Try no bridge=======================
||||||i = 13; j = 0||||||
Node: {'xy': (6, 0), 'value': 5, 'capacity': 3, 'neighbours': [{'node': (6, 2), 'position': 14}, {'node': (4, 0), 'position': 10}], 'is_completed': False, 'position': 13}
Try no bridge=======================
||||||i = 13; j = 1||||||
Node: {'xy': (6, 0), 'value': 5, 'capacity': 3, 'neighbours': [{'node': (6, 2), 'position': 14}, {'node': (4, 0), 'position': 10}], 'is_completed': False, 'position': 13}
Try no bridge=======================
||||||i = 13; j = 2||||||
Node: {'xy': (6, 0), 'value': 5, 'capacity': 3, 'neighbours': [{'node': (6, 2), 'position': 14}, {'node': (4, 0), 'position': 10}], 'is_completed': False, 'position': 13}
Try no bridge=======================
||||||i = 14; j = 0||||||
Node: {'xy': (6, 2), 'value': 8, 'capacity': 3, 'neighbours': [{'node': (6, 0), 'position': 13}, {'node': (4, 2), 'position': 11}, {'node': (8, 2), 'position': 17}], 'is_completed': False, 'position': 14}
Try no bridge=======================
||||||i = 14; j = 1||||||
Node: {'xy': (6, 2), 'value': 8, 'capacity': 3, 'neighbours': [{'node': (6, 0), 'position': 13}, {'node': (4, 2), 'position': 11}, {'node': (8, 2), 'position': 17}], 'is_completed': False, 'position': 14}
Try no bridge=======================
||||||i = 14; j = 2||||||
Node: {'xy': (6, 2), 'value': 8, 'capacity': 3, 'neighbours': [{'node': (6, 0), 'position': 13}, {'node': (4, 2), 'position': 11}, {'node': (8, 2), 'position': 17}], 'is_completed': False, 'position': 14}
Try no bridge=======================
||||||i = 14; j = 3||||||
Node: {'xy': (6, 2), 'value': 8, 'capacity': 3, 'neighbours': [{'node': (6, 0), 'position': 13}, {'node': (4, 2), 'position': 11}, {'node': (8, 2), 'position': 17}], 'is_completed': False, 'position': 14}
Try no bridge=======================
||||||i = 15; j = 0||||||
Node: {'xy': (6, 6), 'value': 8, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 15}
Try no bridge=======================
||||||i = 16; j = 0||||||
Node: {'xy': (6, 9), 'value': 4, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 16}
Try no bridge=======================
||||||i = 17; j = 0||||||
Node: {'xy': (8, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (8, 4), 'position': 18}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 17}
Try no bridge=======================
||||||i = 17; j = 1||||||
Node: {'xy': (8, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (8, 4), 'position': 18}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 17}
Try no bridge=======================
||||||i = 17; j = 2||||||
Node: {'xy': (8, 2), 'value': 5, 'capacity': 2, 'neighbours': [{'node': (8, 4), 'position': 18}, {'node': (6, 2), 'position': 14}], 'is_completed': False, 'position': 17}
Try no bridge=======================
||||||i = 18; j = 0||||||
Node: {'xy': (8, 4), 'value': 7, 'capacity': 2, 'neighbours': [{'node': (8, 2), 'position': 17}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 18}
Try no bridge=======================
||||||i = 18; j = 1||||||
Node: {'xy': (8, 4), 'value': 7, 'capacity': 2, 'neighbours': [{'node': (8, 2), 'position': 17}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 18}
Try no bridge=======================
||||||i = 18; j = 2||||||
Node: {'xy': (8, 4), 'value': 7, 'capacity': 2, 'neighbours': [{'node': (8, 2), 'position': 17}, {'node': (3, 4), 'position': 7}], 'is_completed': False, 'position': 18}
Try no bridge=======================
||||||i = 19; j = 0||||||
Node: {'xy': (8, 6), 'value': 9, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 19}
Try no bridge=======================
||||||i = 20; j = 0||||||
Node: {'xy': (8, 8), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 20}
Try no bridge=======================
||||||i = 21; j = 0||||||
Node: {'xy': (9, 0), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 21}
Try no bridge=======================
||||||i = 22; j = 0||||||
Node: {'xy': (9, 3), 'value': 3, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 22}
Try no bridge=======================
||||||i = 23; j = 0||||||
Node: {'xy': (9, 5), 'value': 1, 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 23}
Try no bridge=======================
||||||i = 24; j = 0||||||
