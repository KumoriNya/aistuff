[4, 0, 0, 3, 0]
[0, 4, 0, 0, 2]
[0, 0, 1, 0, 0]
[0, 3, 0, 0, 0]
[3, 0, 5, 0, 3]
Finding for (0, 0) = 4
All neighbours for (0, 0) = 4: [(0, 3), (4, 0)]
Finding for (0, 3) = 3
All neighbours for (0, 3) = 3: [(0, 0)]
Finding for (1, 1) = 4
All neighbours for (1, 1) = 4: [(1, 4), (3, 1)]
Finding for (1, 4) = 2
All neighbours for (1, 4) = 2: [(1, 1), (4, 4)]
Finding for (2, 2) = 1
All neighbours for (2, 2) = 1: [(4, 2)]
Finding for (3, 1) = 3
All neighbours for (3, 1) = 3: [(1, 1)]
Finding for (4, 0) = 3
All neighbours for (4, 0) = 3: [(4, 2), (0, 0)]
Finding for (4, 2) = 5
All neighbours for (4, 2) = 5: [(4, 0), (4, 4), (2, 2)]
Finding for (4, 4) = 3
All neighbours for (4, 4) = 3: [(4, 2), (1, 4)]
Initialisation complete:
{'xy': (0, 0), 'capacity': 4, 'neighbours': [{'node': (0, 3), 'position': 1}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 0}
{'xy': (0, 3), 'capacity': 3, 'neighbours': [{'node': (0, 0), 'position': 0}], 'is_completed': False, 'position': 1}
{'xy': (1, 1), 'capacity': 4, 'neighbours': [{'node': (1, 4), 'position': 3}, {'node': (3, 1), 'position': 5}], 'is_completed': False, 'position': 2}
{'xy': (1, 4), 'capacity': 2, 'neighbours': [{'node': (1, 1), 'position': 2}, {'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 3}
{'xy': (2, 2), 'capacity': 1, 'neighbours': [{'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 4}
{'xy': (3, 1), 'capacity': 3, 'neighbours': [{'node': (1, 1), 'position': 2}], 'is_completed': False, 'position': 5}
{'xy': (4, 0), 'capacity': 3, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (0, 0), 'position': 0}], 'is_completed': False, 'position': 6}
{'xy': (4, 2), 'capacity': 5, 'neighbours': [{'node': (4, 0), 'position': 6}, {'node': (4, 4), 'position': 8}, {'node': (2, 2), 'position': 4}], 'is_completed': False, 'position': 7}
{'xy': (4, 4), 'capacity': 3, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (1, 4), 'position': 3}], 'is_completed': False, 'position': 8}


Iterating


Checking for
	{'xy': (0, 0), 'capacity': 4, 'neighbours': [{'node': (0, 3), 'position': 1}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 0}
Node: (0, 0) satisfies lemma. Building bridges.
Trying to build bridge from (0, 0) = 4 to (0, 3) = 3
Bridge from (0, 0) = 4 to (0, 3) = 3 built
Affected nodes:
	{'xy': (0, 0), 'capacity': 3, 'neighbours': [{'node': (0, 3), 'position': 1}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 0}
	{'xy': (0, 3), 'capacity': 2, 'neighbours': [{'node': (0, 0), 'position': 0}], 'is_completed': False, 'position': 1}
Bridge:
	{'ends': [(0, 0), (0, 3)], 'val': -1, 'is_hor': True}
Trying to build bridge from (0, 0) = 4 to (4, 0) = 3
Bridge from (0, 0) = 4 to (4, 0) = 3 built
Affected nodes:
	{'xy': (0, 0), 'capacity': 2, 'neighbours': [{'node': (0, 3), 'position': 1}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 0}
	{'xy': (4, 0), 'capacity': 2, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (0, 0), 'position': 0}], 'is_completed': False, 'position': 6}
Bridge:
	{'ends': [(0, 0), (4, 0)], 'val': -1, 'is_hor': False}
4--3.
|4..2
|.1..
|3...
3.5.3

Checking for
	{'xy': (0, 3), 'capacity': 2, 'neighbours': [{'node': (0, 0), 'position': 0}], 'is_completed': False, 'position': 1}
Node: (0, 3) satisfies lemma. Building bridges.
Trying to build bridge from (0, 3) = 3 to (0, 0) = 4
Bridge from (0, 3) = 3 to (0, 0) = 4 built
Affected nodes:
	{'xy': (0, 3), 'capacity': 0, 'neighbours': [{'node': (0, 0), 'position': 0}], 'is_completed': False, 'position': 1}
	{'xy': (0, 0), 'capacity': 0, 'neighbours': [{'node': (0, 3), 'position': 1}, {'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 0}
Bridge:
	{'ends': [(0, 0), (0, 3)], 'val': -3, 'is_hor': True}
Removing
	{'xy': (0, 3), 'capacity': 0, 'neighbours': [{'node': (0, 0), 'position': 0}], 'is_completed': False, 'position': 1}
	from:
[{'node': (0, 3), 'position': 1}, {'node': (4, 0), 'position': 6}]
Removed
	{'xy': (0, 3), 'capacity': 0, 'neighbours': [{'node': (0, 0), 'position': 0}], 'is_completed': False, 'position': 1}
from
	{'xy': (0, 0), 'capacity': 0, 'neighbours': [{'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 0}
Removing
	{'xy': (0, 0), 'capacity': 0, 'neighbours': [{'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 0}
	from:
[{'node': (4, 2), 'position': 7}, {'node': (0, 0), 'position': 0}]
Removed
	{'xy': (0, 0), 'capacity': 0, 'neighbours': [{'node': (4, 0), 'position': 6}], 'is_completed': False, 'position': 0}
from
	{'xy': (4, 0), 'capacity': 2, 'neighbours': [{'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 6}
4EE3.
|4..2
|.1..
|3...
3.5.3

Checking for
	{'xy': (1, 1), 'capacity': 4, 'neighbours': [{'node': (1, 4), 'position': 3}, {'node': (3, 1), 'position': 5}], 'is_completed': False, 'position': 2}
Node: (1, 1) satisfies lemma. Building bridges.
Trying to build bridge from (1, 1) = 4 to (1, 4) = 2
Bridge from (1, 1) = 4 to (1, 4) = 2 built
Affected nodes:
	{'xy': (1, 1), 'capacity': 3, 'neighbours': [{'node': (1, 4), 'position': 3}, {'node': (3, 1), 'position': 5}], 'is_completed': False, 'position': 2}
	{'xy': (1, 4), 'capacity': 1, 'neighbours': [{'node': (1, 1), 'position': 2}, {'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 3}
Bridge:
	{'ends': [(1, 1), (1, 4)], 'val': -1, 'is_hor': True}
Trying to build bridge from (1, 1) = 4 to (3, 1) = 3
Bridge from (1, 1) = 4 to (3, 1) = 3 built
Affected nodes:
	{'xy': (1, 1), 'capacity': 2, 'neighbours': [{'node': (1, 4), 'position': 3}, {'node': (3, 1), 'position': 5}], 'is_completed': False, 'position': 2}
	{'xy': (3, 1), 'capacity': 2, 'neighbours': [{'node': (1, 1), 'position': 2}], 'is_completed': False, 'position': 5}
Bridge:
	{'ends': [(1, 1), (3, 1)], 'val': -1, 'is_hor': False}
4EE3.
|4--2
||1..
|3...
3.5.3

Checking for
	{'xy': (1, 4), 'capacity': 1, 'neighbours': [{'node': (1, 1), 'position': 2}, {'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 3}
Lemma unsatisfied
Checking for
	{'xy': (2, 2), 'capacity': 1, 'neighbours': [{'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 4}
Node: (2, 2) satisfies lemma. Building bridges.
Trying to build bridge from (2, 2) = 1 to (4, 2) = 5
Bridge from (2, 2) = 1 to (4, 2) = 5 built
Affected nodes:
	{'xy': (2, 2), 'capacity': 0, 'neighbours': [{'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 4}
	{'xy': (4, 2), 'capacity': 4, 'neighbours': [{'node': (4, 0), 'position': 6}, {'node': (4, 4), 'position': 8}, {'node': (2, 2), 'position': 4}], 'is_completed': False, 'position': 7}
Bridge:
	{'ends': [(2, 2), (4, 2)], 'val': -1, 'is_hor': False}
Removing
	{'xy': (2, 2), 'capacity': 0, 'neighbours': [{'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 4}
	from:
[{'node': (4, 0), 'position': 6}, {'node': (4, 4), 'position': 8}, {'node': (2, 2), 'position': 4}]
Removed
	{'xy': (2, 2), 'capacity': 0, 'neighbours': [{'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 4}
from
	{'xy': (4, 2), 'capacity': 4, 'neighbours': [{'node': (4, 0), 'position': 6}, {'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 7}
4EE3.
|4--2
||1..
|3|..
3.5.3

Checking for
	{'xy': (3, 1), 'capacity': 2, 'neighbours': [{'node': (1, 1), 'position': 2}], 'is_completed': False, 'position': 5}
Node: (3, 1) satisfies lemma. Building bridges.
Trying to build bridge from (3, 1) = 3 to (1, 1) = 4
Bridge from (3, 1) = 3 to (1, 1) = 4 built
Affected nodes:
	{'xy': (3, 1), 'capacity': 0, 'neighbours': [{'node': (1, 1), 'position': 2}], 'is_completed': False, 'position': 5}
	{'xy': (1, 1), 'capacity': 0, 'neighbours': [{'node': (1, 4), 'position': 3}, {'node': (3, 1), 'position': 5}], 'is_completed': False, 'position': 2}
Bridge:
	{'ends': [(1, 1), (3, 1)], 'val': -3, 'is_hor': False}
Removing
	{'xy': (3, 1), 'capacity': 0, 'neighbours': [{'node': (1, 1), 'position': 2}], 'is_completed': False, 'position': 5}
	from:
[{'node': (1, 4), 'position': 3}, {'node': (3, 1), 'position': 5}]
Removed
	{'xy': (3, 1), 'capacity': 0, 'neighbours': [{'node': (1, 1), 'position': 2}], 'is_completed': False, 'position': 5}
from
	{'xy': (1, 1), 'capacity': 0, 'neighbours': [{'node': (1, 4), 'position': 3}], 'is_completed': False, 'position': 2}
Removing
	{'xy': (1, 1), 'capacity': 0, 'neighbours': [{'node': (1, 4), 'position': 3}], 'is_completed': False, 'position': 2}
	from:
[{'node': (1, 1), 'position': 2}, {'node': (4, 4), 'position': 8}]
Removed
	{'xy': (1, 1), 'capacity': 0, 'neighbours': [{'node': (1, 4), 'position': 3}], 'is_completed': False, 'position': 2}
from
	{'xy': (1, 4), 'capacity': 1, 'neighbours': [{'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 3}
4EE3.
|4--2
|#1..
|3|..
3.5.3

Checking for
	{'xy': (4, 0), 'capacity': 2, 'neighbours': [{'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 6}
Node: (4, 0) satisfies lemma. Building bridges.
Trying to build bridge from (4, 0) = 3 to (4, 2) = 5
Bridge from (4, 0) = 3 to (4, 2) = 5 built
Affected nodes:
	{'xy': (4, 0), 'capacity': 0, 'neighbours': [{'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 6}
	{'xy': (4, 2), 'capacity': 2, 'neighbours': [{'node': (4, 0), 'position': 6}, {'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 7}
Bridge:
	{'ends': [(4, 0), (4, 2)], 'val': -2, 'is_hor': True}
Removing
	{'xy': (4, 0), 'capacity': 0, 'neighbours': [{'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 6}
	from:
[{'node': (4, 0), 'position': 6}, {'node': (4, 4), 'position': 8}]
Removed
	{'xy': (4, 0), 'capacity': 0, 'neighbours': [{'node': (4, 2), 'position': 7}], 'is_completed': False, 'position': 6}
from
	{'xy': (4, 2), 'capacity': 2, 'neighbours': [{'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 7}
4EE3.
|4--2
|#1..
|3|..
3=5.3

Checking for
	{'xy': (4, 2), 'capacity': 2, 'neighbours': [{'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 7}
Node: (4, 2) satisfies lemma. Building bridges.
Trying to build bridge from (4, 2) = 5 to (4, 4) = 3
Bridge from (4, 2) = 5 to (4, 4) = 3 built
Affected nodes:
	{'xy': (4, 2), 'capacity': 0, 'neighbours': [{'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 7}
	{'xy': (4, 4), 'capacity': 1, 'neighbours': [{'node': (4, 2), 'position': 7}, {'node': (1, 4), 'position': 3}], 'is_completed': False, 'position': 8}
Bridge:
	{'ends': [(4, 2), (4, 4)], 'val': -2, 'is_hor': True}
Removing
	{'xy': (4, 2), 'capacity': 0, 'neighbours': [{'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 7}
	from:
[{'node': (4, 2), 'position': 7}, {'node': (1, 4), 'position': 3}]
Removed
	{'xy': (4, 2), 'capacity': 0, 'neighbours': [{'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 7}
from
	{'xy': (4, 4), 'capacity': 1, 'neighbours': [{'node': (1, 4), 'position': 3}], 'is_completed': False, 'position': 8}
4EE3.
|4--2
|#1..
|3|..
3=5=3

Checking for
	{'xy': (4, 4), 'capacity': 1, 'neighbours': [{'node': (1, 4), 'position': 3}], 'is_completed': False, 'position': 8}
Node: (4, 4) satisfies lemma. Building bridges.
Trying to build bridge from (4, 4) = 3 to (1, 4) = 2
Bridge from (4, 4) = 3 to (1, 4) = 2 built
Affected nodes:
	{'xy': (4, 4), 'capacity': 0, 'neighbours': [{'node': (1, 4), 'position': 3}], 'is_completed': False, 'position': 8}
	{'xy': (1, 4), 'capacity': 0, 'neighbours': [{'node': (4, 4), 'position': 8}], 'is_completed': False, 'position': 3}
Bridge:
	{'ends': [(1, 4), (4, 4)], 'val': -1, 'is_hor': False}
Removing
	{'xy': (4, 4), 'capacity': 0, 'neighbours': [{'node': (1, 4), 'position': 3}], 'is_completed': False, 'position': 8}
	from:
[{'node': (4, 4), 'position': 8}]
Removed
	{'xy': (4, 4), 'capacity': 0, 'neighbours': [{'node': (1, 4), 'position': 3}], 'is_completed': False, 'position': 8}
from
	{'xy': (1, 4), 'capacity': 0, 'neighbours': [], 'is_completed': False, 'position': 3}
Removing
	{'xy': (1, 4), 'capacity': 0, 'neighbours': [], 'is_completed': False, 'position': 3}
	from:
4EE3.
|4--2
|#1.|
|3|.|
3=5=3



Iterating


Checking for
	{'xy': (0, 0), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 0}
Lemma unsatisfied
Checking for
	{'xy': (0, 3), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 1}
Lemma unsatisfied
Checking for
	{'xy': (1, 1), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 2}
Lemma unsatisfied
Checking for
	{'xy': (1, 4), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 3}
Lemma unsatisfied
Checking for
	{'xy': (2, 2), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 4}
Lemma unsatisfied
Checking for
	{'xy': (3, 1), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 5}
Lemma unsatisfied
Checking for
	{'xy': (4, 0), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 6}
Lemma unsatisfied
Checking for
	{'xy': (4, 2), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 7}
Lemma unsatisfied
Checking for
	{'xy': (4, 4), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 8}
Lemma unsatisfied
4EE3.
|4--2
|#1.|
|3|.|
3=5=3

{'xy': (0, 0), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 0}
{'xy': (0, 3), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 1}
{'xy': (1, 1), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 2}
{'xy': (1, 4), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 3}
{'xy': (2, 2), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 4}
{'xy': (3, 1), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 5}
{'xy': (4, 0), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 6}
{'xy': (4, 2), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 7}
{'xy': (4, 4), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 8}
{'ends': [(0, 0), (0, 3)], 'val': -3, 'is_hor': True}
{'ends': [(0, 0), (4, 0)], 'val': -1, 'is_hor': False}
{'ends': [(1, 1), (1, 4)], 'val': -1, 'is_hor': True}
{'ends': [(1, 1), (3, 1)], 'val': -3, 'is_hor': False}
{'ends': [(2, 2), (4, 2)], 'val': -1, 'is_hor': False}
{'ends': [(4, 0), (4, 2)], 'val': -2, 'is_hor': True}
{'ends': [(4, 2), (4, 4)], 'val': -2, 'is_hor': True}
{'ends': [(1, 4), (4, 4)], 'val': -1, 'is_hor': False}
