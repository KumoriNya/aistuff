[0, 3, 0]
[3, 0, 3]
[0, 3, 0]
Finding for (0, 1) = 3
All neighbours for (0, 1) = 3: [(2, 1)]
Finding for (1, 0) = 3
All neighbours for (1, 0) = 3: [(1, 2)]
Finding for (1, 2) = 3
All neighbours for (1, 2) = 3: [(1, 0)]
Finding for (2, 1) = 3
All neighbours for (2, 1) = 3: [(0, 1)]
Initialisation complete:
{'xy': (0, 1), 'capacity': 3, 'neighbours': [{'node': (2, 1), 'position': 3}], 'is_completed': False, 'position': 0}
{'xy': (1, 0), 'capacity': 3, 'neighbours': [{'node': (1, 2), 'position': 2}], 'is_completed': False, 'position': 1}
{'xy': (1, 2), 'capacity': 3, 'neighbours': [{'node': (1, 0), 'position': 1}], 'is_completed': False, 'position': 2}
{'xy': (2, 1), 'capacity': 3, 'neighbours': [{'node': (0, 1), 'position': 0}], 'is_completed': False, 'position': 3}


Iterating


Checking for
	{'xy': (0, 1), 'capacity': 3, 'neighbours': [{'node': (2, 1), 'position': 3}], 'is_completed': False, 'position': 0}
Node: (0, 1) satisfies lemma. Building bridges.
Trying to build bridge from (0, 1) = 3 to (2, 1) = 3
Updating neighbours on the side of ends: [(0, 1), (2, 1)]
1 1
(1, 1)
Removed nodes (1, 0) and (1, 2) from their neighbours list
Bridge from (0, 1) = 3 to (2, 1) = 3 built
Affected nodes:
	{'xy': (0, 1), 'capacity': 0, 'neighbours': [{'node': (2, 1), 'position': 3}], 'is_completed': False, 'position': 0}
	{'xy': (2, 1), 'capacity': 0, 'neighbours': [{'node': (0, 1), 'position': 0}], 'is_completed': False, 'position': 3}
Bridge:
	{'ends': [(0, 1), (2, 1)], 'val': -3, 'is_hor': False}
Removing
	{'xy': (0, 1), 'capacity': 0, 'neighbours': [{'node': (2, 1), 'position': 3}], 'is_completed': False, 'position': 0}
	from:
[{'node': (0, 1), 'position': 0}]
Removed
	{'xy': (0, 1), 'capacity': 0, 'neighbours': [{'node': (2, 1), 'position': 3}], 'is_completed': False, 'position': 0}
from
	{'xy': (2, 1), 'capacity': 0, 'neighbours': [], 'is_completed': False, 'position': 3}
Removing
	{'xy': (2, 1), 'capacity': 0, 'neighbours': [], 'is_completed': False, 'position': 3}
	from:
.3.
3#3
.3.

Checking for
	{'xy': (1, 0), 'capacity': 3, 'neighbours': [], 'is_completed': False, 'position': 1}
Node: (1, 0) satisfies lemma. Building bridges.
.3.
3#3
.3.

Checking for
	{'xy': (1, 2), 'capacity': 3, 'neighbours': [], 'is_completed': False, 'position': 2}
Node: (1, 2) satisfies lemma. Building bridges.
.3.
3#3
.3.

Checking for
	{'xy': (2, 1), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 3}
Lemma unsatisfied



Iterating


Checking for
	{'xy': (0, 1), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 0}
Lemma unsatisfied

Checking for
	{'xy': (1, 0), 'capacity': 3, 'neighbours': [], 'is_completed': False, 'position': 1}
Node: (1, 0) satisfies lemma. Building bridges.
.3.
3#3
.3.

Checking for
	{'xy': (1, 2), 'capacity': 3, 'neighbours': [], 'is_completed': False, 'position': 2}
Node: (1, 2) satisfies lemma. Building bridges.
.3.
3#3
.3.

Checking for
	{'xy': (2, 1), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 3}
Lemma unsatisfied



Iterating


Checking for
	{'xy': (0, 1), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 0}
Lemma unsatisfied

Checking for
	{'xy': (1, 0), 'capacity': 3, 'neighbours': [], 'is_completed': False, 'position': 1}
Node: (1, 0) satisfies lemma. Building bridges.
.3.
3#3
.3.

Checking for
	{'xy': (1, 2), 'capacity': 3, 'neighbours': [], 'is_completed': False, 'position': 2}
Node: (1, 2) satisfies lemma. Building bridges.
.3.
3#3
.3.

Checking for
	{'xy': (2, 1), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 3}
Lemma unsatisfied



Iterating


Checking for
	{'xy': (0, 1), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 0}
Lemma unsatisfied

Checking for
	{'xy': (1, 0), 'capacity': 3, 'neighbours': [], 'is_completed': False, 'position': 1}
Node: (1, 0) satisfies lemma. Building bridges.
.3.
3#3
.3.

Checking for
	{'xy': (1, 2), 'capacity': 3, 'neighbours': [], 'is_completed': False, 'position': 2}
Node: (1, 2) satisfies lemma. Building bridges.
.3.
3#3
.3.

Checking for
	{'xy': (2, 1), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 3}
Lemma unsatisfied



Iterating


Checking for
	{'xy': (0, 1), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 0}
Lemma unsatisfied

Checking for
	{'xy': (1, 0), 'capacity': 3, 'neighbours': [], 'is_completed': False, 'position': 1}
Node: (1, 0) satisfies lemma. Building bridges.
.3.
3#3
.3.

Checking for
	{'xy': (1, 2), 'capacity': 3, 'neighbours': [], 'is_completed': False, 'position': 2}
Node: (1, 2) satisfies lemma. Building bridges.
.3.
3#3
.3.

Checking for
	{'xy': (2, 1), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 3}
Lemma unsatisfied

.3.
3#3
.3.

{'xy': (0, 1), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 0}
{'xy': (1, 0), 'capacity': 3, 'neighbours': [], 'is_completed': False, 'position': 1}
{'xy': (1, 2), 'capacity': 3, 'neighbours': [], 'is_completed': False, 'position': 2}
{'xy': (2, 1), 'capacity': 0, 'neighbours': [], 'is_completed': True, 'position': 3}
{'ends': [(0, 1), (2, 1)], 'val': -3, 'is_hor': False}
